<?php

/**
 	* Copyright (C) 2022 Entidad Pública Empresarial Red.es
 	*
 	* This file is part of "dge_search (datos.gob.es)".
 	*
 	* This program is free software: you can redistribute it and/or modify
 	* it under the terms of the GNU General Public License as published by
 	* the Free Software Foundation, either version 2 of the License, or
 	* (at your option) any later version.
 	*
 	* This program is distributed in the hope that it will be useful,
 	* but WITHOUT ANY WARRANTY; without even the implied warranty of
 	* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 	* GNU General Public License for more details.
 	*
 	* You should have received a copy of the GNU General Public License
 	* along with this program. If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * Implements hook_current_search_items().
 */
function dge_search_current_search_items() {
   return array(
    'group' => array(
      'handler' => array(
        'label' => t('DGE Search Field group'),
        'class' => 'DGESearchCurrentSearchGroup',
      ),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function dge_search_block_info() {
  $blocks["dge_search_header_search_block"] = array(
    'info' => t('DGE Header Search Box'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function dge_search_block_view($delta) {
  if ($delta == 'dge_search_header_search_block') {
    return array(
      'subject' => t('Search'),
      'content' => dge_search_header_search_block_content(),
    );
  }
}

function dge_search_header_search_block_content() {
  return drupal_get_form('dge_search_header_search_form');
}

/**
 *
 */
function dge_search_header_search_form($form_state) {

   $form['search_filter'] = array(
     '#type' => 'radios',
     '#title' => '',
     '#options' => array(
       'ckan' => t('Data catalog'),
       'drupal' => t('Portal content')
     ),
     '#default_value' => 'ckan',
     '#weight' => -10
   );
   $form['search_block_form'] = array(
      '#type' => 'textfield',
      '#title' => t('Search'),
      '#title_display' => 'invisible',
      '#size' => 15,
      '#default_value' => '',
      '#attributes' => array(
           'title' => t('Enter the terms you wish to search for.'),
           'placeholder' => t('Search')),
   );
   $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Search'),
   );

   return $form;
}
/**
 *
 */
function dge_search_header_search_form_validate($form, &$form_state) {
   if (empty($form_state['values']['search_block_form']) ||
        strlen($form_state['values']['search_block_form']) < 3 ) {
     form_set_error('search_block_form', t('You must include at least one positive keyword with 3 characters or more.'));
   }
}
/**
 *
 */
function dge_search_header_search_form_submit($form, &$form_state) {
   global $language;

   // If CKAN option is selected, then search redirect to ckan search
   if(isset($form_state['values']['search_filter']) &&
        $form_state['values']['search_filter'] == 'ckan') {
     //Common path
     $path = variable_get('ckan_url', '');

     if(valid_url($path, TRUE)) {
        $path .= '/'.$language->language.'/'.variable_get('ckan_pagina_dataset', 'dataset');
     } else {
        $path = url($path.'/'.variable_get('ckan_pagina_dataset', 'dataset'), array('absolute'=>TRUE));
     }
     $form_state['redirect'] = $path.'?q='.trim($form_state['values']['search_block_form']);
   }
   // Else, go to drupal search
   else {
     $form_state['redirect'] = array(
        'site-search',
        array(
          'query' => array(
            'search_keyword' => trim($form_state['values']['search_block_form']),
          ),
        )
     );
   }
}

/**
 * Implements hook_form_alter().
 */
function dge_search_form_alter(&$form, &$form_state, $form_id) {

  // Alter search form and add radio buttons options
  if($form_id == 'search_form' || $form_id == 'search_block_form') {
    $form['search_block_form']['#attributes']['placeholder'] = t('Search');

    $form['search_filter'] = array(
      '#type' => 'radios',
      '#title' => '',
      '#options' => array(
        'ckan' => t('Dataset'),
        'drupal' => t('Portal content')
      ),
      '#default_value' => 'ckan',
      '#weight' => -10
    );

    $form['#submit'][] = 'dge_search_box_form_submit';

  }
}

/**
 * Process a block search form submission.
 * @see search_box_form_submit
 */
function dge_search_box_form_submit($form, &$form_state) {

  if (isset($_GET['destination'])) {
    unset($_GET['destination']);
  }

  if ($form_state['values']['search_block_form'] == '') {
    form_set_error('keys', t('Please enter some keywords.'));
  }

  // If CKAN option is selected, then search redirect to ckan search
  if(isset($form_state['values']['search_filter']) && $form_state['values']['search_filter'] == 'ckan') {
    $form_state['redirect'] = variable_get('ckan_url', '') . '/dataset?q=' . $form_state['values']['search_block_form'];
  }
  // Else, go to drupal search
  else {
    $form_id = $form['form_id']['#value'];
    $info = search_get_default_module_info();
    if ($info) {
      $form_state['redirect'] = 'search/' . $info['path'] . '/' . trim($form_state['values'][$form_id]);
    }
    else {
      form_set_error(NULL, t('Search is currently disabled.'), 'error');
    }
  }
}

/**
 * Implements hook_page_alter().
 * Breadcrumb for search pages
 */
function dge_search_page_alter() {
  $path = current_path();
  if ($path == 'site-search') {
    $breadcrumb = array();
    $breadcrumb[] = l('Home', '<front>');
    /*if (isset($_GET['search_keyword'])) {
      $breadcrumb[] = l(t('Search'), 'site-search');
      if (!empty($_GET['search_keyword'])) {
        $breadcrumb[] = $_GET['search_keyword'];
     } else {
         $breadcrumb[] = t('All');
     }
    } else {
      $breadcrumb[] = t('Search');
    }*/
    // Set Breadcrumbs
    drupal_set_breadcrumb($breadcrumb);
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function dge_search_theme_registry_alter(&$theme_registry) {
  if(isset($theme_registry['facetapi_accessible_markup']))
    $theme_registry['facetapi_accessible_markup']['function'] = 'dge_search_facetapi_accessible_markup';
}
/**
 * Implements hook_facet_items_alter().
 * @see facetapi_bonus
 */
function dge_search_facet_items_alter(&$build, &$settings) {
  // i18n markup
  // kpr($build);
  // $params=drupal_get_query_parameters();  // $facet_params= $params['f'];
  // $url=(url('peticiones-datos',array(
  //   'query'=> array('f'=>array('as:3','asd:2')),
  //   'absolute'=>true
  // )));
  if ($settings->facet == "field_app_category") {
    $terms = taxonomy_term_load_multiple(array_keys($build));

    foreach($build as $key => $item) {
      if(isset($terms[$key]->language_markup_enabled) && $terms[$key]->language_markup_enabled) {
        $build[$key]["#html"] = true;
        $build[$key]['#markup'] =  dge_i18n_get_markup_html_wrapper($terms[$key], $build[$key]['#markup']);
      }
    }
  }
  //Añade iconos a los filtros a la pagina "Disponibilidad de datos"
  $filters= array('field_request_category','field_request_tx_status');
  if(in_array($settings->facet,$filters)){
    // kpr($build);
    $build=flat_keyed_array($build,'#item_children');
    //  kpr($build);

    $terms = taxonomy_term_load_multiple(array_keys($build));

    foreach($build as $key => $item) {;
        $label=$build[$key]['#markup'];
        $is_active= $build[$key]['#active'];
        if($terms[$key]->field_nti_reference_key){
          $icon_status= $is_active?'blanco':'gris';
          $k=$terms[$key]->field_nti_reference_key['und'][0]['value'];
        }
        $build[$key]["#html"] = true;
        $build[$key]['#markup'] ="<img alt='{$label}' src='/sites/all/themes/dge_theme/images/disponibilidad/{$k}_{$icon_status}.png'/> <span> $label</span>";

    }
  }
  // convert true to text on no boolean field
  if ($settings->facet == "field_initiative_sparql:url") {
    foreach($build as $key => $item) {
      $build[$key]["#markup"] = t('SPARQL');
    }
  }
}

/**
 * Alter accessible markup avoiding html markup inside text variable
 */
function dge_search_facetapi_accessible_markup($variables) {
  $vars = array('@text' => strip_tags($variables['text']));
  $text = ($variables['active']) ? t('Remove @text filter', $vars) : t('Apply @text filter', $vars);
  return '<span class="element-invisible"> ' . $text . ' </span>';
}



/**
 * Implements hook_entity_property_info_alter().
 *
 * Note: This hook is provided by Entity API.
 */
function dge_search_entity_property_info_alter(&$info) {
  // Convert Link to Boolean (SPARQL point)
  $info['node']['bundles']['initiative']['properties']['initiative_sparql_point'] = array(
    'type' => 'boolean',
    'label' => t('SPARQL point boolean'),
    'sanitized' => TRUE,
    'getter callback' => 'dge_search_node_get_sparql_boolean',
  );
}

function dge_search_node_get_sparql_boolean($node) {
  if(isset($node->field_initiative_sparql[LANGUAGE_NONE][0]['url']))
    return true;
  else
    return false;
}

/**
 * Implements hook_views_data_alter().
 *
 * Note: This hook is provided by Views.
 */
function dge_search_views_data_alter(&$data){
  // Convert Link to Boolean (SPARQL point)
  if(isset($data['entity_node']['initiative_sparql_point']))
    $data['node']['initiative_sparql_point'] = $data['entity_node']['initiative_sparql_point'];
}

/*******************************************************************
 * OVERWRITING FACETAPI BREADCRUMBS
 ******************************************************************/
/**
 * Implements hook_facetapi_searcher_info().
 *
 * Note: This hook is provided by Facet API.
 */
function dge_search_facetapi_searcher_info_alter(array &$searcher_info) {
  foreach ($searcher_info as $key => $value) {
    if($value['url processor'] == 'standard'){
      $searcher_info[$key]['url processor'] = 'dge_search_facetapi_processor';
    }
  }
}
/**
 * Implements hook_facetapi_url_processors().
 *
 * Note: This hook is provided by Facet API.
 */
function dge_search_facetapi_url_processors() {
  return array(
    'dge_search_facetapi_processor' => array(
      'handler' => array(
        'label' => t('DGE URL processor'),
        'class' => 'FacetApiDGE',
      ),
    ),
  );
}
class FacetApiDGE extends FacetapiUrlProcessorStandard {
  /**
   * Implements FacetapiUrlProcessor::setBreadcrumb().
   */
  public function setBreadcrumb() {
    // Keep default behavior.
  }
}


function flat_keyed_array($array, $k)
{

  $flatArray = array();
  foreach ($array as  $key => $node) {
    $key=strval($key);
    if (array_key_exists($k, $node) && count($node[$k]) > 0) {
      $flatArray =  $flatArray+ flat_keyed_array($node[$k], $k);
      unset($node[$k]);

      $flatArray[$key] = $node;
    } else {

      $flatArray[$key] = $node;
    }
  }


  return $flatArray;
}
