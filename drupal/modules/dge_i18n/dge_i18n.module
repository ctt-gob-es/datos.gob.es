<?php


/**
 * Copyright (C) 2017 Entidad Pública Empresarial Red.es
 * 
 * This file is part of "dge_i18n (datos.gob.es)".
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * Implements hook_permission().
 */
function dge_i18n_permission() {
  return array(
    'access alter dge_i18n_node' => array(
      'title' => t('Modify DGE i18n variables'),
      'description' => t('Allow users to change the DGE i18n variables'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function dge_i18n_menu() {

  $items['admin/config/dge/i18n/config'] = array(
    'title' => 'i18n config',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dge_i18n_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'dge_i18n.admin.inc',
  );

  $items['node/%node/translate/reset_original'] = array(
    'title' => 'Reset language original',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dge_i18n_language_original_reset_form', 1),
    'access arguments' => array('administer site configuration'),
    'file' => 'dge_i18n.pages.inc',
  );

  $items['node/%node/translate/dge_i18n_node'] = array(
    'title' => 'DGE 18n node information',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dge_i18n_language_node_vars_form', 1),
    'access arguments' => array('access alter dge_i18n_node'),
    'theme callback' => 'variable_get',
    'theme arguments' => array('admin_theme'),
    'file' => 'dge_i18n.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_node_load().
 */
function dge_i18n_node_load($nodes, $types) {
  foreach($nodes as $node) {
    $node->language_original = NULL;
    $node->language_markup_enabled = false;
    if (i18n_node_type_enabled($node)) {
      $node->language_original = dge_i18n_entity_get_status('node', $node);
    }
    if($node->language_original != $node->language) {
      $node->language_markup_enabled = true;
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function dge_i18n_node_insert($node) {
  if(isset($node->dge_i18n_flag_updated))
    return;

  if(dge_i18n_check_node_autotranslation($node)) {
    $dge_i18n = dge_i18n_db_select('node', $node->nid);
    if(!$dge_i18n) {
      $node->language_original = $node->language;
      dge_i18n_db_insert('node', $node->nid, $node->language_original);
      dge_i18n_entity_set_status('node',$node,$node->language);
      dge_i18n_create_nodes_autrotranslation($node);
    }
  }
}

/**
 * Implements hook_node_update().
 */
function dge_i18n_node_update($node) {
  if (! module_exists('workbench_moderation') ||
        ! workbench_moderation_node_type_moderated($node->type)) {
    dge_i18n_node_set_update($node);
  }
}

/**
 * Implements hook_workbench_moderation_transition().
 */
function dge_i18n_workbench_moderation_transition($node, $previous_state, $new_state) {
  if($new_state == 'published') {
    dge_i18n_node_set_update($node, 'workbench');
  }
}

function dge_i18n_node_set_update($node, $type = 'update') {
  if(isset($node->dge_i18n_flag_updated))
    return;

  $status_check = ($type == 'workbench') ? FALSE : TRUE;

  if(dge_i18n_check_node_autotranslation($node, $status_check)) {
    $dge_i18n = dge_i18n_db_select('node', $node->nid);
    if(!$dge_i18n) {
      dge_i18n_db_insert('node', $node->nid, $node->language_original);
      dge_i18n_entity_set_status('node',$node,$node->language);
      dge_i18n_create_nodes_autrotranslation($node, $type);
    }
    else {
      if($node->language == language_default('language')) {
        dge_i18n_entity_update_status('node', $node->nid, $node,$node->language);
        dge_i18n_update_nodes_autrotranslation($node, $type);
      }
      elseif($node->language != $dge_i18n['language_original']) {
        dge_i18n_entity_update_status('node', $node->nid, $node,$node->language);
      }
      else {
        dge_i18n_update_nodes_autrotranslation($node, $type);
      }
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function dge_i18n_node_delete($node) {
  dge_i18n_db_delete('node', $node->nid);
}

function dge_i18n_entity_get_status($entity_type = 'node', $entity) {
  if(isset($entity->language_original)) {
    return $entity->language_original;
  }
  else {
    list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
    $result = dge_i18n_db_select($entity_type, $id);
    if($result) {
      return $result['language_original'];
    }
    else {
      return $entity->language;
    }
  }
}

function dge_i18n_entity_set_status($type = 'node', $entity, $language_original ,$force = false) {
  $entity->language_original = $language_original;
  $entity->is_new = false;
  $entity->dge_i18n_flag_updated = true;
  entity_save($type,$entity);
  unset($entity->dge_i18n_flag_updated);
  return;
}

function dge_i18n_entity_update_status($type, $id, $entity, $language) {
  dge_i18n_db_update($type, $id, $language);
  dge_i18n_entity_set_status($type,$entity,$language);
}

function dge_i18n_check_node_autotranslation($node, $status_check = TRUE) {
  $nodetypes = array_keys(variable_get('dge_i18n_content_types',array()));
  if(( ($status_check && $node->status) || !$status_check )
    && i18n_node_type_enabled($node)
    && in_array($node->type, $nodetypes)){
    return true;
  }
  else {
    return false;
  }
}

/**
 * @param $node
 * @param $translation_node
 *
 * Get translated term when create or update autotranslated nodes
 */
function dge_i18n_node_taxonomy_autotranslation($node, $translation_node) {
  $entity_type = 'node';
  $bundle = $node->type;
  $options = array(
    'default' => FALSE,
    'deleted' => FALSE,
    'language' => NULL,
  );

  // Determine the list of instances to iterate on.
  // TODO: Refactor spaghetti code
  $instances = _field_invoke_get_instances($entity_type, $bundle, $options);
  if (!empty($instances)) {
    foreach ($instances as $field_info) {
      $field = field_info_field($field_info['field_name']);
      if ($field['type'] == 'taxonomy_term_reference' && isset($node->{$field_info['field_name']})) {
        foreach ($node->{$field_info['field_name']} as $language => $items) {
          foreach ($items as $index => $item) {
            $term = isset($item['taxonomy_term']) ? $item['taxonomy_term'] : taxonomy_term_load($item['tid']);
            if ($translation = i18n_taxonomy_term_get_translation($term, $translation_node->language)) {
              $translation_node->{$field_info['field_name']}[$language][$index]['tid'] = $translation->tid;
            }
          }
        }
      }
    }
  }

}


/**
 * @param $node
 * @param $translation_node
 *
 * Read fields and launch field collection clone
 */
function dge_i18n_node_field_collection_autotranslation($node, $translation_node, $op = 'insert') {
  $entity_type = 'node';
  $bundle = $node->type;
  $options = array(
    'default' => FALSE,
    'deleted' => FALSE,
    'language' => NULL,
  );

  // Determine the list of instances to iterate on.
  // TODO: Refactor spaghetti code
  $instances = _field_invoke_get_instances($entity_type, $bundle, $options);
  if (!empty($instances)) {
    foreach ($instances as $field_info) {
      $field = field_info_field($field_info['field_name']);
      if ($field['type'] == 'field_collection' && isset($node->{$field_info['field_name']})) {
        foreach ($node->{$field_info['field_name']} as $language => $items) {
          if($op == 'insert') {
            dge_i18n_field_collection_clone($entity_type, $node, $translation_node, $field_info['field_name'], $language);
          }
          else {
            dge_i18n_field_collection_update($entity_type, $node, $translation_node, $field_info['field_name'], $language);
          }
        }
      }
    }
  }

}

/*
 * Field collection clone
 */
function dge_i18n_field_collection_clone($entity_type, $old_entity, &$entity, $fc_field, $language = LANGUAGE_NONE, $op = 'insert'){
  $entity->dge_i18n_field_collection = TRUE;
  $old_entity_wrapper = entity_metadata_wrapper($entity_type, $old_entity);
  $old_fc_items = $old_entity_wrapper->{$fc_field}->value();
  if (!is_array($old_fc_items)) {
    $old_fc_items = array($old_fc_items);
  }

  $field_info_instances = field_info_instances();
  $field_names = element_children($field_info_instances['field_collection_item'][$fc_field]);

  unset($entity->{$fc_field}[$language]);

  foreach ($old_fc_items as $old_fc_item) {
    $new_fc_item = entity_create('field_collection_item', array('field_name' => $fc_field));
    $new_fc_item->updateHostEntity($entity, $entity_type, TRUE); 

    foreach ($field_names as $field_name) {
      if (!empty($old_fc_item->{$field_name})){
        $new_fc_item->{$field_name} = $old_fc_item->{$field_name};
      }
    }
    $new_fc_item_wrapper = entity_metadata_wrapper('field_collection_item', $new_fc_item);
    $new_fc_item_wrapper->save();

    if($op == 'insert') {
      // Field collection inside field collection
      foreach ($field_names as $field_name) {
        if (!empty($new_fc_item->{$field_name})){
          $field_info = field_info_field($field_name);
          if ($field_info['type'] == 'field_collection'){
            dge_i18n_field_collection_clone('field_collection_item',$old_fc_item, $new_fc_item, $field_name,$language);
          }
        }
      }
    }
  }
}


/*
 * Field collection clone
 */
function dge_i18n_field_collection_update($entity_type, $old_entity, &$entity, $fc_field, $language = LANGUAGE_NONE){

  if(isset($entity->{$fc_field})) {
    unset($entity->{$fc_field}[LANGUAGE_NONE]);
  }

  dge_i18n_field_collection_clone($entity_type, $old_entity, $entity, $fc_field, $language, 'update');
}


function dge_i18n_create_nodes_autrotranslation($node, $type = 'update') {
  $node_clones_created = false;
  $status_check = ($type == 'workbench') ? FALSE : TRUE;
  if(dge_i18n_check_node_autotranslation($node, $status_check)){
    if (!empty($node->tnid)) {
      $tnid = $node->tnid;
      $translations = translation_node_get_translations($node->tnid);
      $node_original_save_tnid = false;
    }
    else {
      $tnid = $node->nid;
      $translations = array($node->language => $node);
      $node_original_save_tnid = true;
    }
    $translated_nodes = array();
    foreach (i18n_node_language_list($node) as $langcode => $language_name) {
      if (isset($translations[$langcode])) {
        $translation_node = node_load($translations[$langcode]->nid);
      }
      else {
        if($node->status || (!$node->status && !$status_check)) {
          $tnode = clone $node;
          $tnode->nid = NULL;
          $tnode->vid = NULL;
          $tnode->title = $node->title;
          $tnode->tnid = $tnid;
          $tnode->is_new = true;
          $tnode->language = $langcode;
          $tnode->language_original = $node->language_original;
          $tnode->dge_i18n_flag_updated = true;

          //Pathauto sanity
          $tpath = array(
            'pid' => NULL,
            'source' => NULL,
            'language' => $tnode->language,
          );
          if (empty($node->path['pathauto'])) {
            $tpath['pathauto'] = 0;
            $tpath['alias'] = $node->path['alias'];
          } else {
            $tpath['pathauto'] = 1;
            $tpath['alias'] = NULL;
          }
          $tnode->path = $tpath;
          
          dge_i18n_node_taxonomy_autotranslation($node, $tnode);
          dge_i18n_node_field_collection_autotranslation($node, $tnode, 'insert');
          
          node_save($tnode);
          if(!dge_i18n_db_select('node', $tnode->nid)) {
            dge_i18n_db_insert('node', $tnode->nid, $tnode->language_original);
          }
          $translations[$langcode] = $tnode;
          $translated_nodes[] = $language_name.'('.$tnode->nid.')';
          $node_clones_created = true;
        }
      }
    }
    if (sizeof($translated_nodes)>0) {
      drupal_set_message(t('Created auto-translations for languages: !language', array('!language'=>implode(", ", $translated_nodes))));
    }

    //Pathauto sanity
    if( $node_act = node_load($nid) ) {
      $node->path = $node_act->path;
    }

    if($node_original_save_tnid && $node_clones_created) {
      $node->tnid = $tnid;
      $node->dge_i18n_flag_updated = true;
      node_save($node);
    }

    return $translations;
  }
  else {
    return false;
  }
}

function dge_i18n_update_nodes_autrotranslation($node, $type = 'update') {
  $status_check = ($type == 'workbench') ? FALSE : TRUE;
  if(dge_i18n_check_node_autotranslation($node, $status_check)){
    // Load all translations
    if (!empty($node->tnid)) {
      $tnid = $node->tnid;
      $translations = translation_node_get_translations($node->tnid);
    }
    // If not translated, exit
    else {
      return false;
    }
    $translated_nodes = array();
    foreach (i18n_node_language_list($node) as $langcode => $language_name) {
      if (isset($translations[$langcode]) && $langcode != $node->language) {
        $translation_node = node_load($translations[$langcode]->nid);

        // Use default language content if exists as original content to content not manually translated
        if ($node->language == language_default('language')
          && isset($translation_node->language_original)
          && $translation_node->language_original != $translation_node->language
        ) {
        	//Avoid simplenews issue for nodes without simplenews information
        	if ($translation_node->type == 'bulletin' && 
        	       isset($node->field_simplenews_term) && 
        	       isset($node->simplenews->tid)) {
        		$translation_node->field_simplenews_term = $node->field_simplenews_term;
        		$translation_node->simplenews->tid = $node->simplenews->tid;
        	}
          // Set automatic translated content to default language
          $translation_node->language_original = $node->language;
          // Set our table without update all node (dge_i18n_flag_updated will be true)
          dge_i18n_entity_update_status('node', $translation_node->nid, $translation_node, $translation_node->language_original);
        }

        // Node published AND language_original NOT EQUAL node language AND language_original EQUALS

        if($translation_node->status
          && $translation_node->language_original != $translation_node->language
          && $translation_node->language_original == $node->language_original
        ) {
          //Get previous path
          $old_tnode_path = $translation_node->path;
          // if(isset($node->workbench_moderation['updating_live_revision']) && $node->workbench_moderation['updating_live_revision'])
          //   continue;
          $tnode = clone $node;
          $tnode->nid = $translation_node->nid;
          $tnode->vid = $translation_node->vid;
          $tnode->title = $node->title;
          $tnode->tnid = $tnid;
          $tnode->is_new = false;
          $tnode->language = $langcode;
          $tnode->language_original = $translation_node->language_original;

          //Pathauto sanity
          $old_tnode_path['old_alias'] = $old_t_path['alias'];
          $old_tnode_path['alias'] = $node->path['alias'];
          $old_tnode_path['pathauto'] = $node->path['pathauto'];
          $tnode->path = $old_tnode_path;

          // Set true disabled hook_node_update
          $tnode->dge_i18n_flag_updated = true;
          dge_i18n_node_taxonomy_autotranslation($node, $tnode);
          dge_i18n_node_field_collection_autotranslation($node, $tnode, 'update');
          node_save($tnode);
          $translations[$langcode] = $tnode;
          drupal_register_shutdown_function('dge_i18n_refresh_language', clone $tnode);
          $translated_nodes[] = $language_name.'('.$tnode->nid.')';
        }
      }
    }
    if (sizeof($translated_nodes)>0) {
      drupal_set_message(t('Updated auto-translations with languages: !language', array('!language'=>implode(", ", $translated_nodes))));
    }
    return $translations;
  }
  else {
    return false;
  }
}

/**
 * Implements hook_module_implements_alter().
 *
 * We need load menu_alter after i18n_node
 */
function dge_i18n_module_implements_alter(&$implementations, $hook) {
  if($hook == "menu_alter") {
    unset($implementations['i18n_node']);
    $mymodule = array('dge_i18n' => false);
    $implementations = $mymodule + $implementations; // Also could use array_merge
  }
}

/**
 * Implements hook_menu_alter().
 *
 * Alter i18n_node_translation_overview menu
 */
function dge_i18n_menu_alter(&$items) {
  if (isset($items['node/%node/translate'])) {
    $items['node/%node/translate']['page callback'] = 'dge_i18n_node_translation_overview';
    $items['node/%node/translate']['file'] = 'dge_i18n.pages.inc';
    $items['node/%node/translate']['module'] = 'dge_i18n';
  }
  if (isset($items['taxonomy/term/%taxonomy_term/translate'])) {
    $items['taxonomy/term/%taxonomy_term/translate']['page callback'] = 'dge_i18n_taxonomy_term_translation_page';
    $items['taxonomy/term/%taxonomy_term/translate']['file'] = 'dge_i18n.pages.inc';
    $items['taxonomy/term/%taxonomy_term/translate']['module'] = 'dge_i18n';
  }
}

function dge_i18n_get_markup($language_markup_enabled, $langcode) {
  if($language_markup_enabled == true) {
    //return "<div lang='$langcode' xml:lang='$langcode'></div>";
    return t('Yes');
  }
  else {
    return t('No');
  }
}

function dge_i18n_get_markup_html($language_markup_enabled, $langcode, $context = 'prefix') {
  if($language_markup_enabled == true) {
    return ($context=='prefix') ? "<div lang='$langcode' xml:lang='$langcode'>" : '</div>';
  }
  else {
    return '';
  }
}
function dge_i18n_get_markup_html_wrapper($entity, $text) {
  if(isset($entity->language_markup_enabled) && $entity->language_markup_enabled == true) {
    return dge_i18n_get_markup_html($entity->language_markup_enabled, $entity->language_original) . $text . dge_i18n_get_markup_html($entity->language_markup_enabled, $entity->language_original, 'suffix');
  }
  else {
    return $text;
  }
}


function dge_i18n_node_get_language_markup_enabled($node) {
  return dge_i18n_get_markup($node->language_markup_enabled, $node->language);
}

/**
 * Implements hook_field_extra_fields().
 */
function dge_i18n_field_extra_fields() {
  $extra = array();
  foreach (node_type_get_types() as $type) {
    $extra['node'][$type->type]['display']['language_markup_enabled'] = array(
      'label' => t('Language Markup Enabled'),
      'weight' => 100,
      'visible' => FALSE,
    );
  }
  return $extra;
}

/**
 * Implements hook_node_view
 */
function dge_i18n_node_view($node, $view_mode, $langcode) {
  if(dge_i18n_check_node_autotranslation($node, false)) {
    $node->content['language_markup_enabled'] = array(
      '#type' => 'item',
      '#title' => t('Language Markup Enabled'),
      '#markup' => dge_i18n_get_markup($node->language_markup_enabled, $node->language),
    );
  }
}

/** TAXONOMY */


/**
 * Implements hook_taxonomy_term_load().
 */
function dge_i18n_taxonomy_term_load($terms) {
  foreach($terms as $term) {
    $term->language_original = NULL;
    $term->language_markup_enabled = false;
    if (i18n_taxonomy_vocabulary_mode($term->vid) == I18N_MODE_TRANSLATE) {
      $term->language_original = dge_i18n_entity_get_status('taxonomy_term', $term);

      if($term->language_original != $term->language) {
        $term->language_markup_enabled = true;
      }
    }
  }
}

/**
 * Implements hook_taxonomy_term_insert().
 */
function dge_i18n_taxonomy_term_insert($term) {
  if(isset($term->dge_i18n_flag_updated))
    return;

  if(dge_i18n_check_taxonomy_term_autotranslation($term)) {
    $dge_i18n = dge_i18n_db_select('taxonomy_term', $term->tid);
    if(!$dge_i18n) {
      $term->language_original = $term->language;
      dge_i18n_db_insert('taxonomy_term', $term->tid, $term->language_original);
      dge_i18n_entity_set_status('taxonomy_term',$term,$term->language);
      dge_i18n_create_taxonomy_terms_autrotranslation($term);
    }
  }
}

/**
 * Implements hook_taxonomy_term_update().
 */
function dge_i18n_taxonomy_term_update($term) {
  if(isset($term->dge_i18n_flag_updated))
    return;

  if(dge_i18n_check_taxonomy_term_autotranslation($term)) {
    $dge_i18n = dge_i18n_db_select('taxonomy_term', $term->tid);
    if(!$dge_i18n) {
      dge_i18n_db_insert('taxonomy_term', $term->tid, $term->language_original);
      dge_i18n_entity_set_status('taxonomy_term',$term,$term->language);
      dge_i18n_create_taxonomy_terms_autrotranslation($term);
    }
    else {
      if($term->language == language_default('language')) {
        dge_i18n_entity_update_status('taxonomy_term', $term->tid, $term,$term->language);
        dge_i18n_update_taxonomy_terms_autrotranslation($term);
      }
      elseif($term->language != $dge_i18n['language_original']) {
        dge_i18n_entity_update_status('taxonomy_term', $term->tid, $term,$term->language);
      }
      else {
        dge_i18n_update_taxonomy_terms_autrotranslation($term);
      }
    }
  }
}


function dge_i18n_create_taxonomy_terms_autrotranslation($term) {
  $term_clones_created = false;
  if(dge_i18n_check_taxonomy_term_autotranslation($term)){
    $vocabulary = taxonomy_vocabulary_load($term->vid);
    if (!empty($term->i18n_tsid)) {
      $i18n_tsid = $term->i18n_tsid;
      $translation_set = i18n_translation_set_load($term->i18n_tsid);
      $translations = $translation_set->get_translations();
      $term_original_save_tnid = false;
    }
    else {
      $i18n_tsid = $term->tid;
      $translation_set = i18n_translation_set_create('taxonomy_term', $vocabulary->machine_name)
        ->add_item($term);
      $i18n_tsid = $term->i18n_tsid;
      $translations = array($term->language => $term);
      $term_original_save_tnid = true;
    }
    $translated_terms = array();
    foreach (i18n_language_list() as $langcode => $language_name) {
      if (isset($translations[$langcode])) {
        $translation_term = taxonomy_term_load($translations[$langcode]->tid);
      }
      else {
        $tterm = clone $term;
        $tterm->tid = NULL;
        $tterm->name = $term->name;
        $tterm->i18n_tsid = $i18n_tsid;
        $tterm->is_new = true;
        $tterm->language = $langcode;
        $tterm->language_original = $term->language_original;
        $tterm->dge_i18n_flag_updated = true;
        taxonomy_term_save($tterm);
        if(!dge_i18n_db_select('taxonomy_term', $tterm->tid)) {
          dge_i18n_db_insert('taxonomy_term', $tterm->tid, $tterm->language_original);
        }
        $translations[$langcode] = $tterm;
        $translated_terms[] = $language_name;
        $term_clones_created = true;
      }
    }
    if (sizeof($translated_terms)>0) {
      drupal_set_message(t('Created auto-translations for languages: !language', array('!language'=>implode(", ", $translated_terms))));
    }
    if($term_original_save_tnid && $term_clones_created) {
      $term->i18n_tsid = $i18n_tsid;
      $term->dge_i18n_flag_updated = true;
      taxonomy_term_save($term);
    }
    return $translations;
  }
  else {
    return false;
  }
}


function dge_i18n_update_taxonomy_terms_autrotranslation($term) {
  if(dge_i18n_check_taxonomy_term_autotranslation($term)){
    if (!empty($term->i18n_tsid)) {
      $i18n_tsid = $term->i18n_tsid;
      $translation_set = i18n_translation_set_load($term->i18n_tsid);
      $translations = $translation_set->get_translations();
    }
    else {
      return false;
    }
    $translated_terms = array();
    foreach (i18n_language_list() as $langcode => $language_name) {
      if (isset($translations[$langcode]) && $langcode != $term->language) {
        $translation_term = taxonomy_term_load($translations[$langcode]->tid);

        // Use default language content if exists as original content to content not manually translated
        if ($term->language == language_default('language')
          && isset($translation_term->language_original)
          && $translation_term->language_original != $translation_term->language
        ) {
          // Set automatic translated content to default language
          $translation_term->language_original = $term->language;
          // Set our table without update all node (dge_i18n_flag_updated will be true)
          dge_i18n_entity_update_status('taxonomy_term', $translation_term->tid, $translation_term, $translation_term->language_original);
        }

        // Term published AND language_original NOT EQUAL node language AND language_original EQUALS
        if($translation_term->language_original != $translation_term->language
          && $translation_term->language_original == $term->language_original
        ) {
          $tterm = clone $term;
          $tterm->tid = $translation_term->tid;
          $tterm->name = $term->name;
          $tterm->i18n_tsid = $i18n_tsid;
          $tterm->is_new = false;
          $tterm->language = $langcode;
          $tterm->language_original = $translation_term->language_original;
          $tterm->dge_i18n_flag_updated = true;
          taxonomy_term_save($tterm);
          $translations[$langcode] = $tterm;
          $translated_terms[] = $language_name.'('.$tterm->tid.')';
        }
      }
    }
    if (sizeof($translated_terms)>0) {
      drupal_set_message(t('Updated auto-translations for languages: !language', array('!language'=>implode(", ", $translated_terms))));
    }
    return $translations;
  }
  else {
    return false;
  }
}


function dge_i18n_check_taxonomy_term_autotranslation($term, $status_check = TRUE) {
  $vocs = variable_get('dge_i18n_vocabularies',array());
  if(i18n_taxonomy_vocabulary_mode($term->vid) == I18N_MODE_TRANSLATE
    && $term->language != LANGUAGE_NONE
    && in_array($term->vid,$vocs)
  ) {
    return true;
  }
}

/**
 * Implements hook_entity_property_info_alter().
 *
 * Note: This hook is provided by Entity API.
 */
function dge_i18n_entity_property_info_alter(&$info) {
  $nodetypes = array_keys(variable_get('dge_i18n_content_types',array()));
  foreach($nodetypes as $type) {
    $info['node']['bundles'][$type]['properties']['language_markup_enabled'] = array(
      'type' => 'text',
      'label' => t('Language Markup Enabled'),
      'sanitized' => TRUE,
      'getter callback' => 'dge_i18n_node_get_language_markup_enabled',
    );
  }
}

/**
 * Implements hook_views_data_alter().
 *
 * Note: This hook is provided by Views.
 */
function dge_i18n_views_data_alter(&$data){
  if(isset($data['entity_node']['language_markup_enabled']))
    $data['node']['language_markup_enabled'] = $data['entity_node']['language_markup_enabled'];
}

/* THEME FUNCTIONS */
function dge_i18n_preprocess_page(&$vars) {
  if(isset($vars['node'])) {
    $node = $vars['node'];

    if(!isset($node->language_markup_enabled))
      return;

    $vars['title_prefix'] = array(
      '#type' => 'markup',
      '#markup' => dge_i18n_get_markup_html($node->language_markup_enabled, $node->language_original),
    );
    $vars['title_suffix'] = array(
      '#type' => 'markup',
      '#markup' =>   dge_i18n_get_markup_html($node->language_markup_enabled, $node->language_original, 'suffix'),
    );
  }
}

function dge_i18n_preprocess_node(&$vars) {
  $node = $vars['node'];

  if(!isset($node->language_markup_enabled))
    return;

  $vars['title_prefix'] = array(
    '#type' => 'markup',
    '#markup' => dge_i18n_get_markup_html($node->language_markup_enabled, $node->language_original),
  );
  $vars['title_suffix'] = array(
    '#type' => 'markup',
    '#markup' =>   dge_i18n_get_markup_html($node->language_markup_enabled, $node->language_original, 'suffix'),
  );


}


function dge_i18n_preprocess_field(&$vars) {

  $element = $vars['element'];
  $field_name = $element['#field_name'];
  $entity = $element['#object'];

  if(!isset($entity->language_markup_enabled))
    return;

  foreach ($vars['items'] as $delta => &$item) {
    switch ($element['#formatter']) {
      case 'image':
        $item['#prefix'] = dge_i18n_get_markup_html($entity->language_markup_enabled, $entity->language_original) ;
        $item['#suffix'] = dge_i18n_get_markup_html($entity->language_markup_enabled, $entity->language_original, 'suffix') ;
        break;

      case 'text_default':
        $item['#prefix'] = dge_i18n_get_markup_html($entity->language_markup_enabled, $entity->language_original) ;
        $item['#suffix'] = dge_i18n_get_markup_html($entity->language_markup_enabled, $entity->language_original, 'suffix') ;
        break;

      case 'text_trimmed':
      case 'text_summary_or_trimmed':
        $item['#prefix'] = dge_i18n_get_markup_html($entity->language_markup_enabled, $entity->language_original) ;
        $item['#suffix'] = dge_i18n_get_markup_html($entity->language_markup_enabled, $entity->language_original, 'suffix') ;
        break;
    }
  }

}

/**
 * Implements hook_field_formatter_info().
 */
function dge_i18n_field_formatter_info() {
  return array(
    'dge_i18n_taxonomy_term_reference_link' => array(
      'label' => t('Link (accesibility marked)'),
      'field types' => array('taxonomy_term_reference'),
    ),
    'dge_i18n_taxonomy_term_reference_plain' => array(
      'label' => t('Plain text (accesibility marked)'),
      'field types' => array('taxonomy_term_reference'),
    ),
  );
}

/**
 * Implements hook_field_formatter_prepare_view().
 *
 * This preloads all taxonomy terms for multiple loaded objects at once and
 * unsets values for invalid terms that do not exist.
 */
function dge_i18n_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  return taxonomy_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, $items, $displays);
}

/**
 * Implements hook_field_formatter_view().
 */
function dge_i18n_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  // Terms whose tid is 'autocreate' do not exist
  // yet and $item['taxonomy_term'] is not set. Theme such terms as
  // just their name.
  switch ($display['type']) {
    case 'dge_i18n_taxonomy_term_reference_link':
      foreach ($items as $delta => $item) {
        if ($item['tid'] == 'autocreate') {
          $element[$delta] = array(
            '#markup' => check_plain($item['name'])
          );
        }
        else {
          $term = $item['taxonomy_term'];
          $uri = entity_uri('taxonomy_term', $term);
          $element[$delta] = array(
            '#type' => 'link',
            '#title' => dge_i18n_get_markup_html_wrapper($term, check_plain($term->name)),
            '#href' => $uri['path'],
            '#options' => $uri['options'],
          );
        }
      }
      break;

    case 'dge_i18n_taxonomy_term_reference_plain':
      foreach ($items as $delta => $item) {
        if ($item['tid'] == 'autocreate') {
          $element[$delta] = array(
            '#markup' => check_plain($item['name'])
          );
        }
        else {
          $element[$delta] = array(
            '#markup' => dge_i18n_get_markup_html_wrapper($item['taxonomy_term'], check_plain(check_plain($item['taxonomy_term']->name))),
            '#html'   => true
          );
        }
      }
      break;
  }

  return $element;
}


/* FORM ALTER FUNCTION */

function dge_i18n_form_node_form_submit($form, &$form_state) {
  $node = $form['#node'];
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function dge_i18n_form_node_form_alter(&$form, $form_state) {

  if (isset($form['#node'])) {
    $node = $form['#node'];
    if(dge_i18n_check_node_autotranslation($node, false)) {
      if(empty($node->nid)) {
        if (! user_is_anonymous()) {
          drupal_set_message(t('Content created will be unpusblished. You must edit after send this content for publish it.'));
        }
      }
      elseif($node->language_original) {
        if($node->language != $node->language_original) {
          drupal_set_message(t('If you save this content you will create a manually translated version'));
        }
        else {
          drupal_set_message(t('If you save this content and other versions share original language you will update this translations in other languages (except manually translated versions)'));
        }
      }

    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function dge_i18n_form_taxonomy_form_term_alter(&$form, $form_state) {
  // Delete LANGUAGE_NONE option in autotranslate vocabularies
  if(isset($form['#vocabulary']->vid) && in_array($form['#vocabulary']->vid,variable_get('dge_i18n_vocabularies',array()))) {
    if(isset($form['language']['#options'][LANGUAGE_NONE]))
      unset($form['language']['#options'][LANGUAGE_NONE]);
  }
}

/**
 * Implements hook_form_alter().
 */
function dge_i18n_form_alter(&$form, &$form_state, $form_id) {
  //dpm($form);
}

/* DATABASE QUERY FUNCTIONS */


function dge_i18n_db_select($type, $id) {
  $result = db_select('dge_i18n', 'd')
    ->fields('d')
    ->condition('entity_type', $type,'=')
    ->condition('entity_id', $id,'=')
    ->execute()
    ->fetchAssoc();

  return $result;
}

function dge_i18n_db_insert($type, $id, $language_original) {
  $result = db_insert('dge_i18n')
    ->fields(array(
      'entity_type' => $type,
      'entity_id' => $id,
      'language_original' => $language_original
    ))
    ->execute();

  return $result;
}

function dge_i18n_db_update($type, $id, $language_original) {
  $result = db_update('dge_i18n')
    ->fields(array('language_original' =>$language_original))
    ->condition('entity_type', $type, '=')
    ->condition('entity_id', $id, '=')
    ->execute();

  return $result;
}

function dge_i18n_db_delete($type, $id) {
  db_delete('dge_i18n')
    ->condition('entity_type', $type, '=')
    ->condition('entity_id', $id, '=')
    ->execute();
}


/**
 * Implements hook_translated_menu_link_alter().
 *
 * Replace node links by its translation
 */
function dge_i18n_translated_menu_link_alter(&$item, $map) {

  if (!empty($map[0]) && $map[0] == 'node' && !empty($map[1]) &&
    is_numeric($map[1]) && empty($map[2]) &&
    in_array($item['menu_name'], variable_get('dge_i18n_menus',array())) &&
    !path_is_admin(current_path())) {
    global $language ;

    //load the referenced node
    $node = node_load((int) $map[1]);

    if ($node && i18n_object_langcode($node) && $language->language != i18n_object_langcode($node)
      && ($translations = translation_node_get_translations($node->tnid)) &&
      array_key_exists($language->language, $translations)) {

      $node_translation = $translations[$language->language];
      $item['href'] = 'node/' . $node_translation->nid;
      $item['title'] = $node_translation->title;
      $item['link_title'] = $node_translation->title;
      $item['object'] = $node_translation;
    }
  }

}

function dge_i18n_refresh_language($node) {
//  $tnode = node_load($node->nid);
//  if ($tnode->language_original != $node->language_original) {
//    $tnode->language_original = $node->language_original;
//    $tnode->language_markup_enabled = $node->language_markup_enabled;
//    $tnode->dge_i18n_flag_updated = true;
//    node_save($tnode);
//    dge_i18n_db_update('node', $tnode->nid, $tnode->language_original);
//  }
}
