<?php

/**
 * Copyright (C) 2017 Entidad Pública Empresarial Red.es
 * 
 * This file is part of "dge_semantic (datos.gob.es)".
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * Implements hook_page_alter().
 */
function dge_semantic_page_alter(&$page) {

  if (!path_is_admin(current_path())) {
    if (drupal_is_front_page()) {
      //Set organization info
      set_organization_json_header();

      // Add semantic information for frontpage
      set_webpage_json_header();

    } else {

      //add breadcrumb header
      set_breadcrumb_json_header();

      $current_node = menu_get_object();
      if (isset($current_node->type)) {
        if ($current_node->type != 'faq' && $current_node->type != 'webform') {
          //add article scheme header
          set_article_scheme_header($current_node);
        }
      }
    }
    dge_semantic_set_hreflang();
  }
}

function set_webpage_json_header() {
   $data = array (
    '@context' => 'http://schema.org',
    '@type' => 'WebPage',
    'name' => t('Home').' | datos.gob.es',
    'description' => t('Datos.gob.es is the portal of national character who organizes and manages the Catalogue of Public Information from the public sector'),
    'publisher' => array (
      '@type' => 'Organization',
      'name' => 'datos.gob.es',
    ),
   );
   $obj = json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES);
   $element = array(
    '#tag' => 'script',
    '#attributes' => array('type' => 'application/ld+json'),
    '#value' => "\r\n".$obj."\r\n",
   );
   drupal_add_html_head($element, 'script webpage');
}

function set_organization_json_header() {
   // Add semantic information for organization
   $data = array (
      '@context' => 'http://schema.org',
      '@type' => 'Organization',
      'url' => 'http://datos.gob.es/',
   );
   $obj = json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES);
   $element = array(
     '#tag' => 'script',
     '#attributes' => array('type' => 'application/ld+json'),
     '#value' => "\r\n".$obj."\r\n",
   );
   drupal_add_html_head($element, 'script');
}

/* Add Article type semantic information */
function set_article_scheme_header($current_node) {

   //Define headline with size control
   $headline = $current_node->title;
   if (strlen($headline) > 110) {
      $headline = truncate_utf8($headline, 107, TRUE, TRUE);
   }
   //Define logo image URL
   $relativePath = "datosgobes/logo_ld.png";
   $logo_url = file_create_url(file_build_uri($relativePath));

   $data = array (
      '@context' => 'http://schema.org',
      '@type' => 'NewsArticle',
      'author' => 'Datos.gob.es',
      "mainEntityOfPage" => array (
        '@type' => 'WebPage',
        '@id' => $current_node->title
      ),
      'headline'=> $headline,
      'datePublished' => format_date($current_node->created, 'custom', 'Y-m-d\\TH:i:sP', 'Europe/Madrid'),
      'dateModified' => format_date($current_node->changed, 'custom', 'Y-m-d\\TH:i:sP', 'Europe/Madrid'),
      'author' => array (
        '@type' => 'Organization',
        'name' => 'datos.gob.es'
      ),
      'publisher' => array (
         '@type' => 'Organization',
         'name' => 'datos.gob.es',
         'logo' => array (
           '@type' => 'ImageObject',
           'url' => $logo_url,
           'width' => 600,
           'height' => 60
        )
      )
   );

   //Set description
   if (isset($current_node->body['und'][0]['safe_value'])) {
      $data['description'] = truncate_utf8(strip_tags($current_node->body['und'][0]['safe_value']), 250, FALSE, TRUE);
   }
   //Set article image
   $without_image = TRUE;
   $image_fields = array(
      'field_success_image', 'field_doc_image', 'field_aporta_image',
      'field_talk_image', 'field_event_image', 'field_blog_image',
      'field_app_image'
   );
   $image_uri = '';
   //Get image from content
   foreach ($image_fields as $image_field) {
     if (isset($current_node->{$image_field}['und'][0]['uri'])) {
       $image_uri = $current_node->{$image_field}['und'][0]['uri'];
       $without_image = FALSE;
       break;
     }
   }
   //Default image if it doent exit
   if ($without_image) {
      $relativePath = "blog/image/dge-img-default.jpg";
      $image_uri = file_build_uri($relativePath);
   }
   $style_image_uri = image_style_path('image_json_ld',$image_uri);
   if (!file_exists($style_image_uri)) {
     image_style_create_derivative(image_style_load('image_json_ld'), $image_uri, $style_image_uri);
   }
   $image_dims = getimagesize(drupal_realpath($style_image_uri));
   //Add image to data
   $data['image'] = array (
     '@type' => 'ImageObject',
     'url' => file_create_url($style_image_uri),
     'height' => $image_dims[1],
     'width' => $image_dims[0]
   );

   $obj = json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES);
   $element = array(
     '#tag' => 'script',
     '#attributes' => array('type' => 'application/ld+json'),
     '#value' => "\r\n".$obj."\r\n",
   );
   drupal_add_html_head($element, 'script article');
}

function set_event_scheme_header($current_node) {
   $data = array (
     '@context' => 'http://schema.org',
     '@type' => 'Event',
     'name' => $current_node->title
   );
   if (isset($current_node->field_event_date['und'][0]['value'])) {
      $data['datePublished'] = format_date(
            strtotime($current_node->field_event_date['und'][0]['value']),
            'custom',
            'Y-m-d\\TH:i:sP',
            $current_node->field_app_publish_date['und'][0]['timezone']);
   }

   $obj = json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES);
   $element = array(
     '#tag' => 'script',
     '#attributes' => array('type' => 'application/ld+json'),
     '#value' => "\r\n".$obj."\r\n",
   );
   drupal_add_html_head($element, 'script article');
}

function set_breadcrumb_json_header() {
   //Add breadcrumbs for all pages
   $breadcrumb = drupal_get_breadcrumb();

   $data = array (
     '@context' => 'http://schema.org',
     '@type' => 'BreadcrumbList',
     'itemListElement' => array(),
   );

   $i = 1;
   foreach($breadcrumb as $item) {
      $linkInfo = "/<a?.*href=\"([^\"]*)\"?.*>(.*)<\/a>/";
      preg_match($linkInfo, $item, $matches);

      if (isset($matches) && sizeof($matches) == 3) {
        $url = $matches[1];
        if (!valid_url($url, TRUE)){
          if (substr($url, 0, strlen('/')) === '/') {
           $url = server_relative_url_to_absolute($url);
          } elseif(substr($url, 0, strlen('#')) !== '#') {
           $url = url($url, array('absolute' => TRUE));
          } else {
           $url = url('<front>', array('absolute' => TRUE, 'fragment' => ltrim($url,'#')));
          }
        }
        $breadcrumbItem = array(
          '@type' => 'ListItem',
          'position' => $i,
          'item' => array (
           '@id' => $url,
           'name' => $matches[2]
          )
        );
        $data['itemListElement'][] = $breadcrumbItem;
        $i++;
      }
   }
   $url = current_path();
   if (!valid_url($url, TRUE)){
      if (substr($url, 0, strlen('/')) === '/') {
      $url = server_relative_url_to_absolute($url);
      } elseif(substr($url, 0, strlen('#')) !== '#') {
      $url = url($url, array('absolute' => TRUE));
      } else {
      $url = url('<front>', array('absolute' => TRUE, 'fragment' => ltrim($url,'#')));
      }
   }
   $breadcrumbItem = array(
     '@type' => 'ListItem',
     'position' => $i,
     'item' => array (
      '@id' => $url,
      'name' => drupal_get_title()
     )
   );
   $data['itemListElement'][] = $breadcrumbItem;

   $obj = json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES);
   $element = array(
     '#tag' => 'script',
     '#attributes' => array('type' => 'application/ld+json'),
     '#value' => "\r\n".$obj."\r\n",
   );
   drupal_add_html_head($element, 'script breadcrumbs');
}

function server_relative_url_to_absolute($path){
  return sprintf(
    "%s://%s%s",
    isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] != 'off' ? 'https' : 'http',
    $_SERVER['SERVER_NAME'],
    $path
  );
}

/**
 * Adds hreflang links on the website for SEO purposes
 */
function dge_semantic_set_hreflang(){
  $path = drupal_is_front_page() ? '<front>' : $_GET['q'];
  //Get default language
  $default_language = language_default();
  if(menu_get_object()) {
    $translations = i18n_get_path_translations($path);
    // Get alternate urls if we've got translations.
    if ($translations) {
      foreach($translations as $lang => $translation) {
        $hreflang = ($default_language->language != $lang)?$lang:'x-default';
        $url = url($translation['href'], array('https' => FALSE, 'absolute' => TRUE, 'language' => i18n_language($lang)));
        $url = str_replace('https://', 'http://', $url);
        $attributes = array(
          'href' => $url,
          'rel' => 'alternate',
          'hreflang' => _get_hreflang($lang),
        );
        drupal_add_html_head_link($attributes);
      }
    }
  } else {
    foreach (i18n_language_list() as $langcode => $language_name) {
      $url = url($path, array('https' => FALSE, 'absolute' => TRUE, 'language' => i18n_language($langcode)));
      $url = str_replace('https://', 'http://', $url);
      if (drupal_is_front_page()) {
        $url = str_replace('/home', '', $url);
      }
      $attributes = array(
          'href' => $url,
          'rel' => 'alternate',
          'hreflang' => _get_hreflang($langcode),
      );
      drupal_add_html_head_link($attributes);
    }
  }
}

function _get_hreflang($lang){
  $default_language = language_default();
  return ($default_language->language != $lang)?$lang:'x-default';
}

/**
 * Implements hook_token_info(). 
 * 
 * This hook will register url:dge-canonical-url token.
 */
function dge_semantic_token_info() {
  $types['dge'] = array(
    'name' => t("DGE"),
    'description' => t("Tokens for DGE values."),
  );
  return array(
    'types' => $types,
    'tokens' => array(
      'dge' => array(
        'canonical-dge-url' => array(
          'name' => t('DGE Canonical URL'),
          'description' => t('URL Absolute Canonical URL for SEO'),
        )
      ),
    ),
  ); 
}

/**
 * Implements hook_tokens(). 
 * 
 * This hook will operate the token and replace it with it's value.
 */
function dge_semantic_tokens($type, $tokens, array $data = array(), array $options = array()) {
	$replacements = array();
	$sanitize = !empty($options['sanitize']);
  if ($type == 'dge') {
    $url_options = array('absolute' => TRUE);
    $path = $data['path'];
    if (isset($data['options'])) {
      $url_options = $data['options'] + $url_options;
    }

    foreach ($tokens as $name => $original) {
      if ($name == 'canonical-dge-url') {
        $path = drupal_is_front_page() ? '<front>' : $_GET['q'];
        //Get default language
        $default_language = language_default();
        if($node = menu_get_object()) {
          if ($node->language == 'es') {
            $url = url('node/'.$node->nid, array('https' => FALSE, 'absolute' => TRUE));
            $url = str_replace('https://', 'http://', $url);
            $replacements[$original] = $url;
            $translated = TRUE;
          } else {
            $translations = i18n_get_path_translations($path);
            $translated = FALSE;
            // Get alternate urls if we've got translations.
            if ($translations) {
              foreach($translations as $lang => $translation) {
                //Only the spanish translation is valid
                if ($lang == 'es') {
                  $translated = TRUE;
                  $url = url($translation['href'], array('https' => FALSE, 'absolute' => TRUE, 'language' => i18n_language('es')));
                  $url = str_replace('https://', 'http://', $url);
                  $replacements[$original] = $url;
                }
              }
            }
            if (!$translated) {
              $url = url('node/'.$node->nid, array('https' => FALSE, 'absolute' => TRUE, 'language' => i18n_language('es')));
              $url = str_replace('https://', 'http://', $url);
              $replacements[$original] = $url;
            }
          } 
        } else {
          $url = url($path, array('https' => FALSE, 'absolute' => TRUE, 'language' => i18n_language('es')));
          $url = str_replace('https://', 'http://', $url);
          $replacements[$original] = $url;
        }
      }   
    }
	}
	return $replacements;
}

function _get_canonical_dge_url($path, $language = NULL){
  $url = url($path, array('absolute' => TRUE, 'language' => i18n_language('es')));
  return str_replace('https://', 'http://', $url);
}