<?php

/**
 * Implements hook_permission().
 */

function dge_media_permission() {
  return array(
    'access media management' => array(
      'title' => t('Manage media'),
      'description' => t('Allow users to manage and edit file information'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function dge_media_menu() {
  $items['admin/dashboard/media/file/%'] = array(
    'title'             => 'Media',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('dge_media_update_form', 4),
    'access arguments'  => array('access media management'),
    'type'              => MENU_NORMAL_ITEM,
  );
  $items['admin/dashboard/media/update-file/%'] = array(
    'title'             => 'Media',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('dge_media_update_file_form', 4),
    'access arguments'  => array('access media management'),
    'type'              => MENU_NORMAL_ITEM,
  );

  return $items;
}


/**
 * Assign data request form
 */
function dge_media_update_form($form, &$form_state, $fid) {
  
  if (is_numeric($fid) && $file = file_load($fid)){
    
    drupal_set_title('Modificación del fichero '.$file->filename);

    $form['#attributes']['class'][] = 'dge-form';
    $form['fid'] = array(
      '#type' => 'hidden',
      '#value' => $fid,
    );

    // Non editable info
    $form['file_fid'] = array(
      '#markup' => _dge_media_create_markup_field('ID del fichero', $file->fid),
    );
    $file_exists = file_exists($file->uri);
    if ($file_exists) {
      $form['file_link'] = array(
        '#markup' => _dge_media_create_markup_field('Link al fichero', l($file->filename, file_create_url($file->uri))),
      );
    } else {
      $form['file_link'] = array(
        '#markup' => _dge_media_create_markup_field('Link al fichero', '<span style="color:red;">El fichero no existe</span>'),
      );
    }
    $user = null;
    if ($file->uid > 0) {
      $user = user_load($file->uid);
      if (empty($user)){
        $user = (object) array('name' => 'Usuario no existente');
      }
    }
    $form['file_creator'] = array(
      '#markup' => _dge_media_create_markup_field('Creador', 
                    (!empty($user))?$user->name:'Anonymous'),
    );
    $form['file_date'] = array(
      '#markup' => _dge_media_create_markup_field('Fecha de creación', 
                     format_date($file->timestamp, 'medium')),
    );
    $file_using = 'El fichero no se está utilizando actualmente';
    $file_utilization = file_usage_list($file);
    if (isset($file_utilization) && sizeof($file_utilization)>0) {
      $file_using = 'El fichero se está utilizando';
      if (isset($file_utilization['file']['node'])) {
        $no_first = FALSE;
        $file_using .= ' en los siguientes contenidos: ';
        foreach ($file_utilization['file']['node'] as $key => $value) {
          $node_tmp = node_load($key);
          $file_using .= ($no_first)?', ':'';
          if ($node_tmp) {
            $file_using .= $link_file = l($key, 'node/'. $node_tmp->nid);
          } else {
            $file_using .= $key;
          }
          $no_first = TRUE;
        }
      }
    }
    $form['file_usage'] = array(
      '#markup' => _dge_media_create_markup_field('Utilización del fichero', 
                   $file_using, 'dge-file-usage-list'),
    );
    
    $form['execution_options'] = array(
      '#type' => 'fieldset',
      '#title' => t('Opciones de modificación'),
    );
    $form['execution_options']['dge_media_filesystem_exists'] = array(
      '#type' => 'select',
      '#title' => t('La URI se corresponde con un fichero físico existente:'),
      '#options' => array(
         0 => 'No hacer nada, mostrar error',
         1 => 'Sobreescribir el fichero físico de la nueva URI',
         2 => 'Utilizar el fichero físico existente de la nueva URI',
      ),
      '#default_value' => variable_get('dge_media_filesystem_exists', 0)
    );
    $form['execution_options']['dge_media_existing_file'] = array(
      '#type' => 'select',
      '#title' => t('Si la URI hace referencia a un fichero de BBDD existente:'),
      '#options' => array(
         0 => 'No hacer nada, mostrar error',
         1 => 'Si no se está utilizando, borrar el registro de BBDD y sobreescribir el fichero físico',
         2 => 'Si no se está utilizando, borrar el registro de BBDD y utilizar el fichero existente de la nueva URI',
      ),
      '#default_value' => variable_get('dge_media_existing_file', 0)
    );

    if (!$file_exists) { 
      unset($form['execution_options']['dge_media_filesystem_exists']['#options'][1]);
      unset($form['execution_options']['dge_media_existing_file']['#options'][1]);
    }

    $form['direct_edition']['filename'] = array(
      '#type' => 'textfield',
      '#title' => t('Filename'),
      '#required' => true,
      '#default_value' => $file->filename,
      '#description' => 'Nombre con el que se descargará el fichero. Es independiente del nombre real del fichero en disco.',
    );
    //Real path
    $real_path = drupal_realpath($file->uri);
    $real_path = './'. substr($real_path, strrpos($real_path, 'sites/default'));

    $ajax_wrapper_id = 'dge-media-check-uri';
    $form['direct_edition']['uri'] = array(
      '#type' => 'textfield',
      '#title' => t('URI'),
      '#required' => TRUE,
      '#default_value' => $file->uri,
      '#description' => 'Ruta en formato Drupal (\'private://\', \'public://\' o \'temporary://\')<br>Ruta en disco dentro del directorio de Drupal: <strong>'.$real_path.'</strong>',
      '#ajax' => array(
        'callback' => '_dge_media_update_uri_callback',
        'wrapper' => $ajax_wrapper_id
      ),
    );
    $form['direct_edition']['ajax_return'] = array(
      '#markup' => _dge_media_create_markup_field(' ', '', $ajax_wrapper_id),
    );
    $form['direct_edition']['status'] = array(
      '#type' => 'select',
      '#title' => t('Status'),
      '#options' => array(
                     0 => 'Temporal',
                     FILE_STATUS_PERMANENT => 'Permanente'),
      '#default_value' => $file->status,
      '#description' => 'Este valor se debe cambiar con cuidado',
    );
    $form['direct_edition']['filemime'] = array(
      '#type' => 'textfield',
      '#title' => t('Filemime'),
      '#default_value' => $file->filemime,
      '#description' => '<strong>Si se deja vacío o se actualiza la URI pero no este campo se recalculará.</strong>',
    );
    $form['direct_edition']['filesize'] = array(
      '#type' => 'textfield',
      '#title' => t('Filesize'),
      '#default_value' => $file->filesize,
      '#description' => 'Tamaño en bytes. Actual tamaño formateado: <strong>'.format_size($file->filesize).'<br>Si se deja vacío o se actualiza la URI pero no este campo se recalculará.</strong>',
    );

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Update'),
    );

    return $form;
  } else {
    drupal_set_message('Se ha proiducido un error. El fichero no es válido o ha dejado de estar disponible.', 'error');
    $destination = drupal_get_destination();
    if (!empty($destination['destination']) && $destination['destination'] != current_path()) {
      drupal_goto(drupal_get_destination());
    } else {
      drupal_goto('admin/dashboard/media');
    }
  }
}

function _dge_media_create_markup_field($title, $value, $div_id=NULL){
  $id = (!empty($div_id))?' id="'.$div_id.'"':'';
  return '<div class="form-item form-type-textfield form-item-filename"'.
         $id.'><label>'.$title.'</label><span>'.$value.'</span></div>';
}

function _dge_media_update_uri_callback($form, &$form_state) {
  $message = '';
  $file = file_load($form_state['values']['fid']);
  if (trim($form_state['values']['uri']) == $file->uri){
    $message = 'La URI actual es la <strong>misma</strong> que la <strong>URI del fichero</strong>';
  } else {
    if (file_exists(trim($form_state['values']['uri']))) {
      $message = 'La URI actual se corresponde con un fichero ya <strong>existente</strong>';
      $query = db_select('file_managed', 'fm');
      $query->fields('fm', array('fid'));
      $query->condition('fm.uri',trim($form_state['values']['uri']),'=');
      $result = $query->execute();
      if ($result && $result->rowCount() > 0) {
        $message = 'La URI actual se corresponde a la URI de otro/s fichero/s existente/s: ';
        $no_first = FALSE;
        while ($record = $result->fetchAssoc()) {
          $message .= ($no_first)?', ':'';
          $file_tmp = file_load($record['fid']);
          $link_file = l($file_tmp->filename, 'admin/dashboard/media/file/'. $file_tmp->fid . '/edit');
          $message .= $link_file;
          $no_first = TRUE;
        } 
      }
    } else {
      $message = 'La URI actual apunta a un fichero que <strong>no existe</strong>';
    }
  }

  $form['direct_edition']['ajax_return'] = array(
    '#markup' => _dge_media_create_markup_field(' ', $message, 'dge-media-check-uri'),
  );
  return $form['direct_edition']['ajax_return'];
}

/**
 *
 * Form validation
 *
 */
function dge_media_update_form_validate($form, &$form_state) {

  if (empty($form_state['values']['filename']) || $form_state['values']['filename'] == 'none') {
    form_set_error('filename', 'El nombre del fichero no puede estar vacío');
  }
  if ($form_state['values']['status'] != 0 && $form_state['values']['status'] != FILE_STATUS_PERMANENT ) {
    form_set_error('status', 'El valor no es válido');
  }
  if (empty($form_state['values']['fid']) || !is_numeric($form_state['values']['fid'])) {
    form_set_error('', 'Se ha producido un error inesperado. Por favor, recarga la página y vuélvelo a intentar.');
  }
  $file = file_load($form_state['values']['fid']);
  //Se comprueba que la URI sea correcta y que el fichero exista
  if (empty($form_state['values']['uri']) || $form_state['values']['uri'] == 'none') {
    form_set_error('uri', 'La URI del fichero no puede estar vacío');
  } elseif (!file_valid_uri($form_state['values']['uri'])) {
    form_set_error('uri', 'La URI debe tener formato Drupal');
  } elseif ($file && trim($form_state['values']['uri']) != $file->uri){
    if (file_exists(trim($form_state['values']['uri']))) {
      $query = db_select('file_managed', 'fm');
      $query->fields('fm', array('fid'));
      $query->condition('fm.uri',trim($form_state['values']['uri']),'=');
      $result = $query->execute();
      $used_files = FALSE;
      if ($result && $result->rowCount() > 0) {
        $using_file = '';
        $no_first = FALSE;
        while ($record = $result->fetchAssoc()) {
          $file = file_load($record['fid']);
          $file_utilization = file_usage_list($file);
          if ($file_utilization && sizeof($file_utilization) > 1) {
            $using_file .= ($no_first)?', ':'';
            $link_file = l($file->filename, 'admin/dashboard/media/file/'. $file->fid . '/edit');
            $message .= $link_file;
            $no_first = TRUE;
          }
        } 
        if (!empty($using_file)) {
          form_set_error('uri', 'La URI "'.$form_state['values']['uri'].'" pertenece a ficheros de BBDD en uso: '.$using_file);
        } elseif ($form_state['values']['dge_media_existing_file'] == 0) {
          form_set_error('uri', 'La URI "'.$form_state['values']['uri'].'" pertenece a un ficheros de BBDD sin utilizar. Para sobreescribirlos modifica la opción <strong>La URI se corresponde con un fichero físico existente</strong>.');
        }
      } elseif ($form_state['values']['dge_media_filesystem_exists'] == 0) {
        form_set_error('uri', 'La URI "'.$form_state['values']['uri'].'" pertenece a un fichero físico existente. Para sobreescribirlo modifica la opción <strong>Si la URI hace referencia a un fichero de BBDD existente</strong>.');
      }
    }
  }
}

/**
 *
 * Form submit
 *
 */
function dge_media_update_form_submit($form, &$form_state) {

  if ($file = file_load($form_state['values']['fid'])) {
    $file->old_uri = $file->uri;
    $destination = trim($form_state['values']['uri']);
    if ($destination != $file->uri) {
      //The new URI references an existing file
      if (file_exists($destination)) {
        $query = db_select('file_managed', 'fm');
        $query->fields('fm', array('fid'));
        $query->condition('fm.uri',$destination,'=');
        $result = $query->execute();
        $used_files = FALSE;
        if ($result && $result->rowCount() > 0) {
          $using_file = FALSE;
          $existing_files = array();
          while ($record = $result->fetchAssoc()) {
            $existing_files[] = $record['fid'];
            $tmp_file = file_load($record['fid']);
            $file_utilization = file_usage_list($tmp_file);
            if ($file_utilization && sizeof($file_utilization) > 1) {
              $using_file = TRUE;
            }
          }
          if (!$using_file && $form_state['values']['dge_media_existing_file'] != 0) {
            //Remove old DDBB files
            foreach ($existing_files as $fid) {
              $tmp_file = file_load($fid);
              if ($form_state['values']['dge_media_existing_file'] == 1) {
                file_delete($tmp_file, TRUE);
              } else {
                db_delete('file_managed')->condition('fid', $tmp_file->fid)->execute();
                db_delete('file_usage')->condition('fid', $tmp_filefile->fid)->execute();
                entity_get_controller('file')->resetCache();
              }
            }
            //Move current file
            if ($form_state['values']['dge_media_existing_file'] == 1) {
              if (!file_move($file, $destination, FILE_EXISTS_REPLACE)) {
                drupal_set_message(t('Unable to replace existing file. Check the permissions on your files directory.'), 'error');
                return;
              }
            }
          }
        } elseif ($form_state['values']['dge_media_filesystem_exists'] == 1) {
          if (!file_move($file, $destination, FILE_EXISTS_REPLACE)) {
            drupal_set_message(t('Unable to replace existing file. Check the permissions on your files directory.'), 'error');
            return;
          }
        }
      } else {
        if (!file_prepare_directory(drupal_dirname($destination), FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
          drupal_set_message(t('Unable to create new directory. Check the permissions on your files directory.'), 'error');
          return;
        }
        if (!file_move($file, $destination, FILE_EXISTS_REPLACE)) {
          drupal_set_message(t('Unable to create new directory. Check the permissions on your files directory.'), 'error');
        }
      }
    }
    $file->uri = $destination;
    $file->filename = trim($form_state['values']['filename']);
    $file->filepath = trim($form_state['values']['uri']);
    if (empty($form_state['values']['filemime']) ||
        ($file->filemime == $form_state['values']['filemime'] &&
         $file->old_uri != $file->uri)) {
      $file->filemime = file_get_mimetype(drupal_realpath($destination));
    } else {
      $file->filemime = trim($form_state['values']['filemime']);
    }
    if (empty($form_state['values']['filesize']) ||
        ($file->filesize == $form_state['values']['filesize'] &&
         $file->old_uri != $file->uri)) {
      $file->filesize = filesize(drupal_realpath($destination));
    } else {
      $file->filesize = intval(trim($form_state['values']['filesize']));
    }
    $file->status = $form_state['values']['status'];
    $file->description = '';
    
    drupal_write_record('file_managed', $file, 'fid');
    entity_get_controller('file')->resetCache(array($file->fid));

    //Update general cache
    if (module_exists('varnish')) {
      $host = _varnish_get_host();
      //refresh https image varnish cache
      $url = url(file_create_url($file->uri), array('absolute' => TRUE));
      varnish_purge($host, $url);
      //refresh http image varnish cache
      $url = str_replace('https://', 'http://', $url);
      varnish_purge($host, $url);
    }

    drupal_set_message('Fichero actualiado correctamente', 'status');
  }
}

/**
 * Assign data request form
 */
function dge_media_update_file_form($form, &$form_state, $fid) {
  
  if (is_numeric($fid) && $file = file_load($fid)){
    
    drupal_set_title('Modificación del fichero '.$file->filename);

    $form['#attributes']['class'][] = 'dge-form';
    $form['fid'] = array(
      '#type' => 'hidden',
      '#value' => $fid,
    );

    // Non editable info
    if (file_exists($file->uri)) {
      $form['file_link'] = array(
        '#markup' => _dge_media_create_markup_field('Link al fichero', l($file->filename, file_create_url($file->uri))),
      );
    } else {
      $form['file_link'] = array(
        '#markup' => _dge_media_create_markup_field('Link al fichero', '<span style="color:red;">El fichero no existe</span>'),
      );
    }
    $form['file_name'] = array(
      '#markup' => _dge_media_create_markup_field('Filename', $file->filename),
    );
    $form['file_uri'] = array(
      '#markup' => _dge_media_create_markup_field('URI', $file->uri),
    );
    $form['file_info'] = array(
      '#type' => 'fieldset',
      '#title' => t('Otra información del fichero (Expandible)'),
      '#collapsible' => TRUE,
      "#access" => FALSE
    );
    $form['file_info']['file_fid'] = array(
      '#markup' => _dge_media_create_markup_field('ID del fichero', $file->fid),
    );
    $user = null;
    if ($file->uid > 0) {
      $user = user_load($file->uid);
      if (empty($user)){
        $user = (object) array('name' => 'Usuario no existente');
      }
    }
    $form['file_info']['file_creator'] = array(
      '#markup' => _dge_media_create_markup_field('Creador', 
                    (!empty($user))?$user->name:'Anonymous'),
    );
    $form['file_info']['file_date'] = array(
      '#markup' => _dge_media_create_markup_field('Fecha de creación', 
                     format_date($file->timestamp, 'medium')),
    );
    $file_using = 'El fichero no se está utilizando actualmente';
    $file_utilization = file_usage_list($file);
    if (isset($file_utilization) && sizeof($file_utilization)>0) {
      $file_using = 'El fichero se está utilizando';
      if (isset($file_utilization['file']['node'])) {
        $no_first = FALSE;
        $file_using .= ' en los siguientes contenidos: ';
        foreach ($file_utilization['file']['node'] as $key => $value) {
          $node_tmp = node_load($key);
          $file_using .= ($no_first)?', ':'';
          if ($node_tmp) {
            $file_using .= $link_file = l($key, 'node/'. $node_tmp->nid);
          } else {
            $file_using .= $key;
          }
          $no_first = TRUE;
        }
      }
    }
    $form['file_info']['file_usage'] = array(
      '#markup' => _dge_media_create_markup_field('Utilización del fichero', 
                   $file_using, 'dge-file-usage-list'),
    );
    $form['file_info']['file_status'] = array(
      '#markup' => _dge_media_create_markup_field('Status', (($file->status)?'Permanente':'Temporal')),
    );
    $form['file_info']['file_mime'] = array(
      '#markup' => _dge_media_create_markup_field('Filemime', $file->filemime),
    );
    $form['file_info']['file_size'] = array(
      '#markup' => _dge_media_create_markup_field('Filesize', format_size($file->filesize).' ('.$file->filesize.')'),
    );

    # Options
    $form['execution_options'] = array(
      '#type' => 'fieldset',
      '#title' => t('Opciones de modificación'),
    );
    $form['execution_options']['dge_media_new_extension'] = array(
      '#type' => 'select',
      '#title' => 'Si el fichero tiene un nombre diferente',
      '#options' => array(
         0 => 'No hacer nada, mostrar error',
         1 => 'Mantener el nombre actual aunque no coincidan',
         2 => 'Cambiar el nombre del fichero si actualmente no existen ficheros con ese nombre',
         3 => 'Cambiar el nombre del fichero si no existe fichero de BBDD con la URI nueva o existe pero no está en uso',
      ),
      '#default_value' => variable_get('dge_media_new_extension', 0)
    );

    $form['dge_media_new_file'] = array(
      '#type'   => "file",
      '#title'  => t('Nuevo fichero'),
    );

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Update'),
    );

    return $form;
  } else {
    drupal_set_message('Se ha proiducido un error. El fichero no es válido o ha dejado de estar disponible.', 'error');
    $destination = drupal_get_destination();
    if (!empty($destination['destination']) && $destination['destination'] != current_path()) {
      drupal_goto(drupal_get_destination());
    } else {
      drupal_goto('admin/dashboard/media');
    }
  }
}

/**
 *
 * Form validation
 *
 */
function dge_media_update_file_form_validate($form, &$form_state) {
  
  $file = file_load($form_state['values']['fid']);

  $uploaded_file = file_save_upload('dge_media_new_file', array('file_validate_extensions' => array()));
  if ($uploaded_file) {
    // Using filename because temporary directory can have more than a file with the same name
    if ($uploaded_file->filename != drupal_basename($file->uri)) {
      if ($form_state['values']['dge_media_new_extension'] == 0) {
        form_set_error('dge_media_new_file', 'Los ficheros no pueden tener diferente nombre. Para sobreescribirlo modifica la opción <strong>Si el fichero tiene un nombre diferente</strong>.');
      } elseif ($form_state['values']['dge_media_new_extension'] == 1) {
        if ($uri = file_unmanaged_copy($uploaded_file->uri, $file->uri, FILE_EXISTS_REPLACE)) {
          entity_get_controller('file')->resetCache();
          drupal_set_message('El fichero se ha renombrado y actualizado correctamente', 'status');
        } else {
          form_set_error('dge_media_new_file', 'Se ha producido un error al copiar el nuevo fichero.');
          file_delete($uploaded_file, TRUE);
          return;
        }
      } else {
        $new_file = drupal_dirname($file->uri) . '/' . $uploaded_file->filename;
        $new_file = str_replace("///","//",$new_file);
        if (file_exists($new_file)) {
          if ($form_state['values']['dge_media_new_extension'] == 2) {
            form_set_error('dge_media_new_file', 'El nuevo fichero ya está en uso por otro fichero en BBDD. Para sobreescribirlo modifica la opción <strong>Si el fichero tiene un nombre diferente</strong>.');
            file_delete($uploaded_file, TRUE);
            return;
          } else {
            // Check if file is registered by other file in ddbb
            $query = db_select('file_managed', 'fm');
            $query->fields('fm', array('fid'));
            $query->condition('fm.uri',$new_file,'=');
            $result = $query->execute();
            $used_files = FALSE;
            if ($result && $result->rowCount() > 0) {
              $using_file = FALSE;
              $existing_files = array();
              while ($record = $result->fetchAssoc()) {
                $existing_files[] = $record['fid'];
                $tmp_file = file_load($record['fid']);
                $file_utilization = file_usage_list($tmp_file);
                if ($file_utilization && sizeof($file_utilization) > 1) {
                  $using_file = TRUE;
                }
              }
              if (!$using_file) {
                //Remove old DDBB files
                foreach ($existing_files as $fid) {
                  $tmp_file = file_load($fid);
                  if ($form_state['values']['dge_media_existing_file'] == 1) {
                    file_delete($tmp_file, TRUE);
                  } else {
                    db_delete('file_managed')->condition('fid', $tmp_file->fid)->execute();
                    db_delete('file_usage')->condition('fid', $tmp_filefile->fid)->execute();
                    entity_get_controller('file')->resetCache();
                  }
                }
                //Move current file
                if ($uri = file_unmanaged_copy($uploaded_file->uri, $new_file)) {
                  $file->uri = $new_file;
                  $file->filename = $uploaded_file->filename;
                  $file->filepath = $new_file;
                  drupal_set_message('Se ha cambiado el nombre del fichero y actualizado correctamente', 'status');
                } else {
                  form_set_error('dge_media_new_file', 'Se ha producido un error al copiar el nuevo fichero.');
                  file_delete($uploaded_file, TRUE);
                  return;
                }
              }
            }
            else {
              // File exists in filesystem but not in the database
              if ($uri = file_unmanaged_copy($uploaded_file->uri, $new_file)) {
                $file->uri = $new_file;
                $file->filename = $uploaded_file->filename;
                $file->filepath = $new_file;
                drupal_set_message('Se ha cambiado el nombre del fichero y actualizado correctamente', 'status');
              } else {
                form_set_error('dge_media_new_file', 'Se ha producido un error al copiar el nuevo fichero.');
                file_delete($uploaded_file, TRUE);
                return;
              }
            }
          }
        } else {
          if ($uri = file_unmanaged_copy($uploaded_file->uri, $new_file)) {
            $file->uri = $new_file;
            $file->filename = $uploaded_file->filename;
            $file->filepath = $new_file;
            drupal_set_message('Se ha cambiado el nombre del fichero y actualizado correctamente', 'status');
          } else {
            form_set_error('dge_media_new_file', 'Se ha producido un error al copiar el nuevo fichero.');
            file_delete($uploaded_file, TRUE);
            return;
          }
        }
      }
    } else {
      if ($uri = file_unmanaged_copy($uploaded_file->uri, $file->uri, FILE_EXISTS_REPLACE)) {
        entity_get_controller('file')->resetCache();
        drupal_set_message('El fichero se ha actualizado correctamente', 'status');
      } else {
        form_set_error('dge_media_new_file', 'Se ha producido un error al copiar el nuevo fichero.');
        file_delete($uploaded_file, TRUE);
        return;
      }
    }

    // Update filedata
    $file->filemime = file_get_mimetype(drupal_realpath($file->uri));
    $file->filesize = filesize(drupal_realpath($file->uri));
    //Update record and cache
    drupal_write_record('file_managed', $file, 'fid');
    //Remove temporal file
    file_delete($uploaded_file, TRUE);
    //Update file cache
    entity_get_controller('file')->resetCache();
    //Update general cache
    if (module_exists('varnish')) {
      varnish_purge_all_pages();
    }
  } else {
    form_set_error('dge_media_new_file', 'Debes añadir un fichero');
  }
}

/**
 *
 * Form submit
 *
 */
function dge_media_update_file_form_submit($form, &$form_state) {
  return;
}

/**
 * Implements hook_views_data().
 */
function dge_media_views_data() {
  $data = array();

  // Link to edit the file
  $data['file_managed']['edit_file'] = array(
      'field' => array(
        'title' => t('DGE File edit link'),
        'help' => t('Provide a simple link to edit the fiile.'),
        'handler' => 'views_handler_field_dge_file_link_edit',
      ),
  );
  // Link to update the file
  $data['file_managed']['update_file'] = array(
    'field' => array(
      'title' => t('DGE File update link'),
      'help' => t('Provide a simple link to update the fiile.'),
      'handler' => 'views_handler_field_dge_file_udate_link_edit',
    ),
  );

  return $data;
}

/**
 * Implements hook_views_api().
 */
function dge_media_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'dge_media'),
  );
}

/**
 * Implements hook_views_default_views().
 */
function dge_media_views_default_views() {
  $view = new view();
  $view->name = 'media_search';
  $view->description = '';
  $view->tag = 'default';
  $view->base_table = 'file_managed';
  $view->human_name = 'media_search';
  $view->core = 7;
  $view->api_version = '3.0';
  $view->disabled = FALSE; /* Edit this to true to make a default view disabled initially */
  
  /* Display: Master */
  $handler = $view->new_display('default', 'Master', 'default');
  $handler->display->display_options['title'] = 'Media';
  $handler->display->display_options['use_more_always'] = FALSE;
  $handler->display->display_options['use_more_text'] = 'más';
  $handler->display->display_options['access']['type'] = 'perm';
  $handler->display->display_options['cache']['type'] = 'none';
  $handler->display->display_options['query']['type'] = 'views_query';
  $handler->display->display_options['exposed_form']['type'] = 'basic';
  $handler->display->display_options['exposed_form']['options']['submit_button'] = 'Aplicar';
  $handler->display->display_options['exposed_form']['options']['reset_button_label'] = 'Reiniciar';
  $handler->display->display_options['exposed_form']['options']['exposed_sorts_label'] = 'Ordenar por';
  $handler->display->display_options['pager']['type'] = 'full';
  $handler->display->display_options['pager']['options']['items_per_page'] = '10';
  $handler->display->display_options['pager']['options']['expose']['items_per_page_label'] = 'Elementos por página';
  $handler->display->display_options['pager']['options']['expose']['items_per_page_options_all_label'] = '- Todo -';
  $handler->display->display_options['pager']['options']['expose']['offset_label'] = 'Desplazamiento';
  $handler->display->display_options['pager']['options']['tags']['first'] = '« primero';
  $handler->display->display_options['pager']['options']['tags']['previous'] = '‹ anterior';
  $handler->display->display_options['pager']['options']['tags']['next'] = 'siguiente ›';
  $handler->display->display_options['pager']['options']['tags']['last'] = 'última »';
  $handler->display->display_options['style_plugin'] = 'table';
  $handler->display->display_options['style_options']['columns'] = array(
    'fid' => 'fid',
    'filename' => 'filename',
    'status' => 'status',
    'filemime' => 'filemime',
    'uri' => 'uri',
    'filesize' => 'filesize',
    'timestamp' => 'timestamp',
    'edit_file' => 'edit_file',
    'update_file' => 'edit_file',
  );
  $handler->display->display_options['style_options']['default'] = '-1';
  $handler->display->display_options['style_options']['info'] = array(
    'fid' => array(
      'sortable' => 1,
      'default_sort_order' => 'asc',
      'align' => '',
      'separator' => '',
      'empty_column' => 0,
    ),
    'filename' => array(
      'sortable' => 1,
      'default_sort_order' => 'asc',
      'align' => '',
      'separator' => '',
      'empty_column' => 0,
    ),
    'status' => array(
      'sortable' => 1,
      'default_sort_order' => 'asc',
      'align' => '',
      'separator' => '',
      'empty_column' => 0,
    ),
    'filemime' => array(
      'sortable' => 1,
      'default_sort_order' => 'asc',
      'align' => '',
      'separator' => '',
      'empty_column' => 0,
    ),
    'uri' => array(
      'sortable' => 1,
      'default_sort_order' => 'asc',
      'align' => '',
      'separator' => '',
      'empty_column' => 0,
    ),
    'filesize' => array(
      'sortable' => 1,
      'default_sort_order' => 'asc',
      'align' => '',
      'separator' => '',
      'empty_column' => 0,
    ),
    'timestamp' => array(
      'sortable' => 1,
      'default_sort_order' => 'asc',
      'align' => '',
      'separator' => '',
      'empty_column' => 0,
    ),
    'edit_file' => array(
      'align' => '',
      'separator' => '',
      'empty_column' => 0,
    ),
    'update_file' => array(
      'align' => '',
      'separator' => '',
      'empty_column' => 0,
    ),
  );
  /* Campo: File: File ID */
  $handler->display->display_options['fields']['fid']['id'] = 'fid';
  $handler->display->display_options['fields']['fid']['table'] = 'file_managed';
  $handler->display->display_options['fields']['fid']['field'] = 'fid';
  /* Campo: File: Nombre */
  $handler->display->display_options['fields']['filename']['id'] = 'filename';
  $handler->display->display_options['fields']['filename']['table'] = 'file_managed';
  $handler->display->display_options['fields']['filename']['field'] = 'filename';
  $handler->display->display_options['fields']['filename']['label'] = 'Name';
  $handler->display->display_options['fields']['filename']['alter']['word_boundary'] = FALSE;
  $handler->display->display_options['fields']['filename']['alter']['ellipsis'] = FALSE;
  $handler->display->display_options['fields']['filename']['link_to_file'] = TRUE;
  /* Campo: File: Estado */
  $handler->display->display_options['fields']['status']['id'] = 'status';
  $handler->display->display_options['fields']['status']['table'] = 'file_managed';
  $handler->display->display_options['fields']['status']['field'] = 'status';
  /* Campo: File: Mime type */
  $handler->display->display_options['fields']['filemime']['id'] = 'filemime';
  $handler->display->display_options['fields']['filemime']['table'] = 'file_managed';
  $handler->display->display_options['fields']['filemime']['field'] = 'filemime';
  /* Campo: File: Ruta */
  $handler->display->display_options['fields']['uri']['id'] = 'uri';
  $handler->display->display_options['fields']['uri']['table'] = 'file_managed';
  $handler->display->display_options['fields']['uri']['field'] = 'uri';
  /* Campo: File: Tamaño */
  $handler->display->display_options['fields']['filesize']['id'] = 'filesize';
  $handler->display->display_options['fields']['filesize']['table'] = 'file_managed';
  $handler->display->display_options['fields']['filesize']['field'] = 'filesize';
  /* Campo: File: Upload date */
  $handler->display->display_options['fields']['timestamp']['id'] = 'timestamp';
  $handler->display->display_options['fields']['timestamp']['table'] = 'file_managed';
  $handler->display->display_options['fields']['timestamp']['field'] = 'timestamp';
  $handler->display->display_options['fields']['timestamp']['date_format'] = 'medium';
  $handler->display->display_options['fields']['timestamp']['second_date_format'] = 'search_api_facetapi_YEAR';
  /* Campo: File: DGE File edit link */
  $handler->display->display_options['fields']['edit_file']['id'] = 'edit_file';
  $handler->display->display_options['fields']['edit_file']['table'] = 'file_managed';
  $handler->display->display_options['fields']['edit_file']['field'] = 'edit_file';
  $handler->display->display_options['fields']['edit_file']['label'] = 'Operaciones';
  /* Campo: File: DGE File update link */
  $handler->display->display_options['fields']['update_file']['id'] = 'update_file';
  $handler->display->display_options['fields']['update_file']['table'] = 'file_managed';
  $handler->display->display_options['fields']['update_file']['field'] = 'update_file';
  $handler->display->display_options['fields']['update_file']['label'] = '';
  $handler->display->display_options['fields']['update_file']['alter']['alter_text'] = TRUE;
  $handler->display->display_options['fields']['update_file']['alter']['text'] = '<br />[update_file] ';
  $handler->display->display_options['fields']['update_file']['element_label_colon'] = FALSE;
  $handler->display->display_options['fields']['update_file']['text'] = 'actualizar fichero';
  /* Filter criterion: File: Nombre */
  $handler->display->display_options['filters']['filename']['id'] = 'filename';
  $handler->display->display_options['filters']['filename']['table'] = 'file_managed';
  $handler->display->display_options['filters']['filename']['field'] = 'filename';
  $handler->display->display_options['filters']['filename']['operator'] = 'contains';
  $handler->display->display_options['filters']['filename']['exposed'] = TRUE;
  $handler->display->display_options['filters']['filename']['expose']['operator_id'] = 'filename_op';
  $handler->display->display_options['filters']['filename']['expose']['label'] = 'Nombre';
  $handler->display->display_options['filters']['filename']['expose']['operator'] = 'filename_op';
  $handler->display->display_options['filters']['filename']['expose']['identifier'] = 'filename';
  $handler->display->display_options['filters']['filename']['expose']['remember_roles'] = array(
    2 => '2',
    1 => 0,
    3 => 0,
    7 => 0,
    5 => 0,
    6 => 0,
    8 => 0,
  );
  /* Filter criterion: File: Ruta */
  $handler->display->display_options['filters']['uri']['id'] = 'uri';
  $handler->display->display_options['filters']['uri']['table'] = 'file_managed';
  $handler->display->display_options['filters']['uri']['field'] = 'uri';
  $handler->display->display_options['filters']['uri']['operator'] = 'contains';
  $handler->display->display_options['filters']['uri']['exposed'] = TRUE;
  $handler->display->display_options['filters']['uri']['expose']['operator_id'] = 'uri_op';
  $handler->display->display_options['filters']['uri']['expose']['label'] = 'Ruta';
  $handler->display->display_options['filters']['uri']['expose']['operator'] = 'uri_op';
  $handler->display->display_options['filters']['uri']['expose']['identifier'] = 'uri';
  $handler->display->display_options['filters']['uri']['expose']['remember_roles'] = array(
    2 => '2',
    1 => 0,
    3 => 0,
    7 => 0,
    5 => 0,
    6 => 0,
    8 => 0,
  );
  /* Filter criterion: File: Mime type */
  $handler->display->display_options['filters']['filemime']['id'] = 'filemime';
  $handler->display->display_options['filters']['filemime']['table'] = 'file_managed';
  $handler->display->display_options['filters']['filemime']['field'] = 'filemime';
  $handler->display->display_options['filters']['filemime']['operator'] = 'contains';
  $handler->display->display_options['filters']['filemime']['exposed'] = TRUE;
  $handler->display->display_options['filters']['filemime']['expose']['operator_id'] = 'filemime_op';
  $handler->display->display_options['filters']['filemime']['expose']['label'] = 'Mime type';
  $handler->display->display_options['filters']['filemime']['expose']['operator'] = 'filemime_op';
  $handler->display->display_options['filters']['filemime']['expose']['identifier'] = 'filemime';
  $handler->display->display_options['filters']['filemime']['expose']['remember_roles'] = array(
    2 => '2',
    1 => 0,
    3 => 0,
    7 => 0,
    5 => 0,
    6 => 0,
    8 => 0,
  );
  $handler->display->display_options['filters']['filemime']['group_info']['label'] = 'Mime type';
  $handler->display->display_options['filters']['filemime']['group_info']['identifier'] = 'filemime';
  $handler->display->display_options['filters']['filemime']['group_info']['remember'] = FALSE;
  $handler->display->display_options['filters']['filemime']['group_info']['group_items'] = array(
    1 => array(),
    2 => array(),
    3 => array(),
  );
  
  /* Display: Page */
  $handler = $view->new_display('page', 'Page', 'page');
  $handler->display->display_options['path'] = 'admin/dashboard/media';

  $views[$view->name] = $view;
  return $views;
}



/**
 * Field handler to present a dge file edit link.
 *
 * @ingroup views_field_handlers
 */
class views_handler_field_dge_file_link_edit extends views_handler_field {
  function construct() {
    parent::construct();
    $this->additional_fields['fid'] = 'fid';
  }

  function option_definition() {
    $options = parent::option_definition();

    $options['text'] = array('default' => '', 'translatable' => TRUE);

    return $options;
  }

  function options_form(&$form, &$form_state) {
    $form['text'] = array(
      '#type' => 'textfield',
      '#title' => t('Text to display'),
      '#default_value' => $this->options['text'],
    );
    parent::options_form($form, $form_state);
  }

  function query() {
    $this->ensure_my_table();
    $this->add_additional_fields();
  }

  function render($values) {
    // Check there is an actual value, as on a relationship there may not be.
    if ($fid = $this->get_value($values, 'fid')) {
      $text = !empty($this->options['text']) ? $this->options['text'] : t('edit');
      return l($text, 'admin/dashboard/media/file/'. $fid, array('query' => drupal_get_destination()));
    }
  }
}

/**
 * Field handler to present a dge file edit link.
 *
 * @ingroup views_field_handlers
 */
class views_handler_field_dge_file_udate_link_edit extends views_handler_field {
  function construct() {
    parent::construct();
    $this->additional_fields['fid'] = 'fid';
  }

  function option_definition() {
    $options = parent::option_definition();

    $options['text'] = array('default' => '', 'translatable' => TRUE);

    return $options;
  }

  function options_form(&$form, &$form_state) {
    $form['text'] = array(
      '#type' => 'textfield',
      '#title' => t('Text to display'),
      '#default_value' => $this->options['text'],
    );
    parent::options_form($form, $form_state);
  }

  function query() {
    $this->ensure_my_table();
    $this->add_additional_fields();
  }

  function render($values) {
    // Check there is an actual value, as on a relationship there may not be.
    if ($fid = $this->get_value($values, 'fid')) {
      $text = !empty($this->options['text']) ? $this->options['text'] : t('edit');
      return l($text, 'admin/dashboard/media/update-file/'. $fid, array('query' => drupal_get_destination()));
    }
  }
}



