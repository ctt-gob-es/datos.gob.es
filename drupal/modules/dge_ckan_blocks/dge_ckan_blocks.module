<?php

/**
 	* Copyright (C) 2022 Entidad PÃºblica Empresarial Red.es
 	*
 	* This file is part of "dge_ckan_blocks (datos.gob.es)".
 	*
 	* This program is free software: you can redistribute it and/or modify
 	* it under the terms of the GNU General Public License as published by
 	* the Free Software Foundation, either version 2 of the License, or
 	* (at your option) any later version.
 	*
 	* This program is distributed in the hope that it will be useful,
 	* but WITHOUT ANY WARRANTY; without even the implied warranty of
 	* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 	* GNU General Public License for more details.
 	*
 	* You should have received a copy of the GNU General Public License
 	* along with this program. If not, see <http://www.gnu.org/licenses/>.

*/

/**
 * Countries vocabulary
 */
define('DGE_ADM_LEVELS_TAXONOMY','administrative_level');
define('DGE_NTI_CATEGORIES','nti_reference');

/**
 * Implements hook_permission().
 */
function dge_ckan_blocks_permission() {
  return array(
    'access config initiatives' => array(
      'title' => t('Assign DGE Content Types Administration'),
      'description' => t('Allow users to configure the home initiatives block'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function dge_ckan_blocks_menu() {
  $items['admin/config/dge/home-initiatives'] = array(
       'title' => t('Configure Home Initiatives Block'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dge_ckan_blocks_home_initiatives_form'),
    'access arguments' => array('access config initiatives'),
    'type' => MENU_NORMAL_ITEM
   );

  return $items;
}

/*
* Configure Initiatives block
*/
function dge_ckan_blocks_home_initiatives_form($form, &$form_state, $nid = NULL) {

  $form['dge_ckan_initiative_map_url'] = array(
         '#type' => 'textfield',
         '#title' => t('URL to Map of initiatives'),
         '#default_value' =>  variable_get('dge_ckan_initiative_map_url', '#'),
  );

  return system_settings_form($form);
}

/**
 * Get list of administration levels
 *
 * @return array
 */
function _dge_ckan_blocks_load_administration_levels() {
  $taxonomy = taxonomy_vocabulary_machine_name_load(DGE_ADM_LEVELS_TAXONOMY);
  $levels = taxonomy_get_tree($taxonomy->vid);
  $options = array();
  foreach ($levels as $i=> $level) {
     if ($level->language == 'es' || $level->language == 'und') {
        $options[$level->tid] = $level->name;
     }
  }
  return $options;
}

/**
 * Implements hook_block_info().
 */
function dge_ckan_blocks_block_info() {
  $blocks["dge_ckan_blocks_package_search"] = array(
    'info' => t('DGE CKAN Blocks Package Search'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks["dge_ckan_blocks_package_csv"] = array(
    'info' => t('DGE CKAN Blocks Package Csv'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks["dge_ckan_blocks_package_api"] = array(
    'info' => t('DGE CKAN Blocks Package Api'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks["dge_ckan_blocks_init_review"] = array(
    'info' => t('DGE Home Initiatives Review'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks["dge_ckan_blocks_categories"] = array(
    'info' => t('DGE Home Category List'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks["dge_ckan_small_color_block_datos"]=array(
    'info'=>t('DGE Small Color Block Datos'),
    'cache'=>DRUPAL_NO_CACHE
  );
  $blocks["dge_ckan_small_color_block_dis"]=array(
    'info'=>t('DGE Small Color Block Distribucione'),
    'cache'=>DRUPAL_NO_CACHE
  );
   $blocks["dge_ckan_block_cdd"]=array(
    'info'=>t('DGE   Block Conjunto Datos y Distribuciones'),
    'cache'=>DRUPAL_NO_CACHE
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function dge_ckan_blocks_block_view($delta)
{
    switch ($delta) {
    case 'dge_ckan_blocks_package_search':
      global $language;

      $settings = [
          'rows'  => 3,
          'start' => 0,
          'sort'  => 'metadata_created desc',
      ];

      return [
          'subject' => t('Last datasets'),
          'content' => theme('dge_ckan_blocks_package_search',
            [
                'packages' => dge_ckan_blocks_package_search('', '', $settings['rows'], $settings['start'], $settings['sort']),
                'ckan_url' => variable_get('ckan_url', '').'/'.$language->language.'/'.variable_get('ckan_pagina_dataset', 'dataset'),
            ]),
      ];
      case 'dge_ckan_blocks_package_csv':
        global $language;

        $settings = [
            'rows'  => 3,
            'start' => 0,
            'sort'  => get_random_seed().' desc',
        ];

        return [
            'subject' => t('Last datasets'),
            'content' => theme('dge_ckan_blocks_package_search',
              [
                  'packages' => dge_ckan_blocks_package_search('', 'res_format:text/csv', $settings['rows'], $settings['start'], $settings['sort']),
                  'ckan_url' => variable_get('ckan_url', '').'/'.$language->language.'/'.variable_get('ckan_pagina_dataset', 'dataset').'?res_format_label=CSV',
              ]),
        ];
        case 'dge_ckan_blocks_package_api':
          global $language;

          $settings = [
              'rows'  => 3,
              'start' => 0,
              'sort'  => get_random_seed().' desc',
          ];

          return [
              'subject' => t('Last datasets'),
              'content' => theme('dge_ckan_blocks_package_search',
                [
                    'packages' => dge_ckan_blocks_package_search('', 'res_format:(text/wms OR text/wfs OR application/vnd.ogc.wms_xml OR application/api)', $settings['rows'], $settings['start'], $settings['sort']),
                    'ckan_url' => variable_get('ckan_url', '').'/'.$language->language.'/'.variable_get('ckan_pagina_dataset', 'dataset').'?res_format_label=API',
                ]),
          ];
    case 'dge_ckan_blocks_init_review':
      return [
          'subject' => t('Open data initiatives'),
          'content' => dge_ckan_blocks_initiatives_block(),
      ];
    case 'dge_ckan_blocks_categories':
      return [
          'subject' => t('Data Catalog'),
          'content' => dge_ckan_blocks_categories_block(),
      ];
    case 'dge_ckan_small_color_block_dis':
      return [
          'subject' => t('Small Color Block Distribucione'),
          'content' => dge_ckan_small_color_block_dis(),
      ];
    case 'dge_ckan_small_color_block_datos':
      return [
          'subject' => t('Small Color Block Datos'),
          'content' => dge_ckan_small_color_block_datos(),
      ];
    case 'dge_ckan_block_cdd':
      return [
          'subject'=> t('Block Conjunto Datos y Distribuciones'),
          'content'=> dge_ckan_block_cdd(),
      ];
  }

}
function dge_ckan_block_cdd(){
  return theme('dge_ckan_block_datos_template',
  array(
    'counter1'=>get_datos_count(),
    'counter2'=>get_dis_count()
  ));
}
function get_dis_count(){
  $ckan= dge_ckan_init_class();
  $response = $ckan->request(
    'package_search','','',0,0,'metadata_created desc','["num_resources"]'
  );
  $total=0;
  if($response['success']){
    foreach($response['result']['facets']['num_resources'] as $key=>$value){

     $total+= intval($key)*$value;
    }
  }
  return $total;
}
function get_datos_count(){
  $ckan= dge_ckan_init_class();
  $response = $ckan->request(
    'package_search','','',0,0,''
  );
  $total=0;
  if($response['success']){
    $total= $response['result']['count'];
  }
  return $total;
}
function dge_ckan_small_color_block_datos(){
  $ckan= dge_ckan_init_class();
  $response = $ckan->request(
    'package_search','','',0,0,''
  );
  $total=0;
  if($response['success']){
    $total= $response['result']['count'];
  }
  return theme('dge_ckan_small_color_block',
  array(
    'total'=>$total,
    'label1'=>'Conjuntos',
    'label2'=>'de datos',
    'backgroundColor'=>'#E05206',
    'color'=>'#FFF',
    'image_path'=>'conjunto_datos.png'
  ));
}
function dge_ckan_small_color_block_dis(){
  $ckan= dge_ckan_init_class();
  $response = $ckan->request(
    'package_search','','',0,0,'metadata_created desc','["num_resources"]'
  );
  $total=0;
  if($response['success']){
    foreach($response['result']['facets']['num_resources'] as $key=>$value){

     $total+= intval($key)*$value;
    }
  }
  return theme('dge_ckan_small_color_block',
  array(
    'total'=>$total,
    'label1'=>'',
    'label2'=>'Distribuciones',
    'backgroundColor'=>'#6F2586',
    'color'=>'#fff',
    'image_path'=>'distribuciones.png'

  ));
}

function dge_ckan_blocks_package_search($q='',$fq='',$rows, $start, $sort) {
  $ckan = dge_ckan_init_class();
  $response = $ckan->request(
    'package_search',
    $q,
    $fq,
    $rows,
    $start,
    $sort
  );
  $packages = array();
  if($response['success']) {
    module_load_include('inc', 'dge_ckan', 'dge_ckan_json_label');
    $nti_dge_dataset_label = new dge_ckan_json_label('nti_dge_dataset.json');
    foreach($response['result']['results'] as $result) {
      $date = DateTime::createFromFormat('Y-m-d\TH:i:s.u', $result['metadata_created'], new DateTimeZone('UTC'));
      $date->setTimeZone(new DateTimeZone('Europe/Madrid'));
      $packages[$result['id']] = array(
        'date' => $date,
        'title' => dge_ckan_get_translated_dataset_field($result['title_translated']),
        'organization' => $result['organization']['title'],
        'description' => dge_ckan_get_translated_dataset_field($result['description']),
        'url' => variable_get('ckan_url', '').'/'.variable_get('ckan_pagina_dataset', 'dataset').'/'. $result['name'],
        'formats' => dge_ckan_get_dataset_resouce_formats($result, $nti_dge_dataset_label)
      );
    }
  }

  return $packages;
}

/**
 * Implements hook_theme().
 */
function dge_ckan_blocks_theme() {
  $path = drupal_get_path('module', 'dge_ckan_blocks') . '/theme';
  return array(
    'dge_ckan_blocks_package_search' => array(
       'template' => 'dge_ckan_blocks_package_search',
       'path' => $path,
       'pattern' => 'twitter__',
       'variables' => array(),
     ),
     'dge_ckan_blocks_initiatives_review' => array(
       'template' => 'dge_ckan_blocks_initiatives_review',
       'path' => $path,
       'variables' => array(
          'total' => 0,
          'initiatives' => array(),
          'map_link' => '#'
       ),
    ),
    'dge_ckan_blocks_catalogo' => array(
      'template' => 'dge_ckan_blocks_catalogo',
      'path' => $path,
      'variables' => array(
         'categories' => array(),
      ),
    ),
    'dge_ckan_small_color_block'=>array(
      'template'=>'dge_ckan_small_color_block',
      'path'=>$path,
      'variables'=>array(
        'total'=>0,
        'label'=>'label',
        'backgroundColor'=>'red'
     )
    ),
    'dge_ckan_block_datos_template'=>array(
        'template'=>'dge_ckan_block_datos_template',
        'path'=>$path,
        'variables'=>array(
          'label1'=>'Datasets ',
          'label2'=>'Distributions',
          'counter1'=>20008,
          'counter2'=>117978,
          'link_label'=>'open catalog',
          'url'=>'./catalogo'

        )
      )
  );
}

/*
   Return the value of a dataset field multilangage and the value language.
   If the current language value does not exist a default value is searched
   using the i18n configured languages.
*/
function dge_ckan_get_translated_dataset_field($value){
   if (is_array($value)){
      global $language;
      if (array_key_exists($language->language, $value) &&
           !empty($value[$language->language])){
         return array('value' => $value[$language->language],
                      'language' => $language->language);
      } else {
         foreach (i18n_language_list() as $i18n_key => $i18n_language) {
            if (array_key_exists($i18n_key, $value) &&
                 !empty($value[$i18n_key])){
               return array('value' => $value[$i18n_key],
                            'language' => $i18n_key);
            }
         }
      }
   }
}

function dge_ckan_get_dataset_resouce_formats($dataset, $nti_dge_dataset_label){
   $resources = array();

   if (is_array($dataset)){
      foreach ($dataset['resources'] as $resource) {
         $resources[] = dge_ckan_blocks_get_format_label($resource['format'], $nti_dge_dataset_label);
      }
   }
   return array_unique($resources);
}

function dge_ckan_blocks_get_format_label($format, $definition){
   $label = $format;
   if (isset($definition->json_data['resource_fields'])) {
      foreach ($definition->json_data['resource_fields'] as $field) {
         if ($field['field_name'] == 'format') {
            foreach ($field['choices'] as $file_format) {
               if ($file_format['value'] == $format) {
                  $label = $file_format['label'];
                  break;
               }
            }
         }
      }
   }
   return $label;
}

function dge_ckan_blocks_initiatives_block() {
  $total = 0;
  $map_link = variable_get('dge_ckan_initiative_map_url', '#');

  //Total
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'initiative')
      ->propertyCondition('status', 1)
      ->propertyCondition('language', 'es');
  $total = $query->count()->execute();

  //By level
  $taxonomy = taxonomy_vocabulary_machine_name_load(DGE_ADM_LEVELS_TAXONOMY);
  $levels = taxonomy_get_tree($taxonomy->vid);
  $initiatives = array();
  foreach($levels as $tid => $level) {
     $term = i18n_taxonomy_localize_terms($level);

     $query = new EntityFieldQuery();
     $query->entityCondition('entity_type', 'node')
         ->entityCondition('bundle', 'initiative')
         ->propertyCondition('status', 1)
         ->propertyCondition('language', 'es')
         ->fieldCondition('field_initiative_admin_level', 'tid', $term->tid, '=');
     $num = $query->count()->execute();
     if ($num) {
        $initiatives[$tid] = array(
           'title' => $term->name,
           'total' => $num
        );
     }
  }

  return theme('dge_ckan_blocks_initiatives_review',
    array(
      'total' => $total,
      'initiatives' => $initiatives,
      'map_link' => $map_link
  ));
}

function dge_ckan_blocks_categories_block() {
   global $language;

   $categories_home = '';

   //Retrieve cached block
   if ($cached = cache_get('dge_categories_home_'.$language->language, 'cache'))  {
      if ($cached->expire > time()) {
         $categories_home = $cached->data;
      }
   }
   if(empty($categories_home)) {
      //Call Twitter
      $categories_home = dge_ckan_blocks_categories_retrieve($language);
      //Cached every 6 hours by language
      cache_set('dge_categories_home_'.$language->language, $categories_home, 'cache', time() + 3600);
   }

   return $categories_home;
}

function dge_ckan_blocks_categories_retrieve($language) {

   //Result var
   $categories = array();

   //Get CKAN Path
   $path = variable_get('ckan_url', '');
   if(valid_url($path, TRUE)) {
     $path .= '/'.$language->language.'/dataset';
   } else {
     $path = url($path.'/dataset', array('absolute'=>TRUE));
   }

   //Get NTI Categories
   $taxonomy = taxonomy_vocabulary_machine_name_load(DGE_NTI_CATEGORIES);
   $categories_nti = taxonomy_get_tree($taxonomy->vid);

   foreach ($categories_nti as $category_unload) {
      $category = taxonomy_term_load($category_unload->tid);
      $category = i18n_taxonomy_localize_terms($category);

      $nti_reference_key = field_get_items('taxonomy_term', $category, 'field_nti_reference_key');
      if (!empty($nti_reference_key) && !empty($nti_reference_key[0]['value'])) {
         $data_category = array();
         $data_category['key'] = $nti_reference_key[0]['value'];
         $data_category['link'] = variable_get('ckan_url', '').'/'.$language->language.'/'.variable_get('ckan_pagina_dataset', 'dataset').'?theme_id='.$nti_reference_key[0]['value'];
         $data_category['label'] = $category->name;

         $ckan = dge_ckan_init_class();
         $response = $ckan->request(
             'package_search',
             '',
             'theme_id:'.$nti_reference_key[0]['value'],
             0,
             0
         );
         if (isset($response['success']) && $response['success']) {
            $data_category['total'] = $response['result']['count'];
         } else {
            $data_category['total'] = 0;
         }

         $categories[] = $data_category;
      }
   }


   return theme('dge_ckan_blocks_catalogo',
     array(
       'categories' => $categories,
   ));;
}

function get_random_seed(){
  srand(time());
  return ('random_'.strval(rand()));
}
